diff --git a/dist/nitro.mjs b/dist/nitro.mjs
index 1d07b0e073af941065e3677ad46118b7009a38e6..b02a21ddf60f4e13189174205715b4e953c3b61d 100644
--- a/dist/nitro.mjs
+++ b/dist/nitro.mjs
@@ -49,7 +49,7 @@ import escapeRE from 'escape-string-regexp';
 import { withLeadingSlash, withoutTrailingSlash, withBase, joinURL, withoutLeadingSlash, withTrailingSlash } from 'ufo';
 import jiti from 'jiti';
 import { getProperty } from 'dot-prop';
-import { resolve as resolve$1 } from 'node:path';
+import { resolve as resolve$1, parse } from 'node:path';
 import archiver from 'archiver';
 import MagicString from 'magic-string';
 
@@ -930,9 +930,9 @@ function externals(opts) {
             const warn = `Multiple major versions of package \`${pkgName}\` are being externalized. Picking latest version:
 
 ` + [
-              `  ${isNewer ? "-" : "+"} ` + existingPkgDir + "@" + v1,
-              `  ${isNewer ? "+" : "-"} ` + pkgDir + "@" + v2
-            ].join("\n");
+                `  ${isNewer ? "-" : "+"} ` + existingPkgDir + "@" + v1,
+                `  ${isNewer ? "+" : "-"} ` + pkgDir + "@" + v2
+              ].join("\n");
             if (!ignoreWarns.has(warn)) {
               consola.warn(warn);
               ignoreWarns.add(warn);
@@ -1508,14 +1508,14 @@ function raw(opts = {}) {
       if (isBinary(id)) {
         const serialized = Buffer.from(code, "binary").toString("base64");
         return {
-          code: `// ROLLUP_NO_REPLACE 
- import {base64ToUint8Array } from "${HELPER_ID}" 
+          code: `// ROLLUP_NO_REPLACE
+ import {base64ToUint8Array } from "${HELPER_ID}"
  export default base64ToUint8Array("${serialized}")`,
           map: null
         };
       } else {
         return {
-          code: `// ROLLUP_NO_REPLACE 
+          code: `// ROLLUP_NO_REPLACE
  export default ${JSON.stringify(code)}`,
           map: null
         };
@@ -1669,9 +1669,9 @@ const inlineAppConfig = ${JSON.stringify(nitro.options.appConfig, null, 2)};
 ${nitro.options.appConfigFiles.map((file, i) => genImport(file, "appConfig" + i) + ";").join("\n")}
 
 export const appConfig = defuFn(${[
-        ...nitro.options.appConfigFiles.map((_, i) => "appConfig" + i),
-        "inlineAppConfig"
-      ].join(", ")});
+          ...nitro.options.appConfigFiles.map((_, i) => "appConfig" + i),
+          "inlineAppConfig"
+        ].join(", ")});
       `
     },
     nitro.vfs
@@ -3249,10 +3249,23 @@ async function writeCFRoutes(nitro) {
       )
     ]
   });
-  routes.exclude.push(
-    ...publicAssetFiles.map((i) => withLeadingSlash(i)).sort(comparePaths)
-  );
+
+  const exclude = new Set();
+  for (const publicAsset of publicAssetFiles) {
+    const dir = parse(publicAsset).dir;
+
+    console.log({ dir })
+    if (dir === "") {
+      exclude.add(withLeadingSlash(publicAsset))
+      continue;
+    } else {
+      exclude.add(withLeadingSlash(`${dir}/*`))
+    }
+  }
+
+  routes.exclude.push(...[...exclude].sort(comparePaths))
   routes.exclude.splice(100 - routes.include.length);
+
   await writeRoutes();
 }
 function comparePaths(a, b) {
@@ -5050,7 +5063,7 @@ function resolveNitroModule(mod, nitroOptions) {
   let _url;
   if (typeof mod === "string") {
     globalThis.defineNitroModule = // @ts-ignore
-    globalThis.defineNitroModule || defineNitroModule;
+      globalThis.defineNitroModule || defineNitroModule;
     const _jiti = jiti(nitroOptions.rootDir, {
       interopDefault: true,
       alias: nitroOptions.alias
