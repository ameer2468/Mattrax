diff --git a/dist/handler/handler.d.ts b/dist/handler/handler.d.ts
old mode 100644
new mode 100755
diff --git a/dist/handler/handler.js b/dist/handler/handler.js
old mode 100644
new mode 100755
diff --git a/dist/handler/index.module.js b/dist/handler/index.module.js
old mode 100644
new mode 100755
diff --git a/dist/handler/index.module.js.map b/dist/handler/index.module.js.map
old mode 100644
new mode 100755
diff --git a/dist/index/createTRPCSolid.d.ts b/dist/index/createTRPCSolid.d.ts
old mode 100644
new mode 100755
diff --git a/dist/index/createTRPCSolid.js b/dist/index/createTRPCSolid.js
old mode 100644
new mode 100755
diff --git a/dist/index/index.d.ts b/dist/index/index.d.ts
old mode 100644
new mode 100755
diff --git a/dist/index/index.jsx b/dist/index/index.jsx
old mode 100644
new mode 100755
diff --git a/dist/index/index.module.js b/dist/index/index.module.js
old mode 100644
new mode 100755
index c443cda109a100b3395b51fb0ac5e7e6e4164b1d..234c5b62924c5e28151b651ecd3ff8f88a8448bb
--- a/dist/index/index.module.js
+++ b/dist/index/index.module.js
@@ -1,6 +1,6 @@
 import { createTRPCClient } from '@trpc/client';
 export * from '@trpc/client';
-import { createContext, useContext, createEffect, on, onCleanup, mergeProps } from 'solid-js';
+import { createContext, createMemo, useContext, createEffect, on, onCleanup, mergeProps } from 'solid-js';
 import { isServer, getRequestEvent, createComponent } from 'solid-js/web';
 import { createQuery, createMutation, createInfiniteQuery } from '@tanstack/solid-query';
 
@@ -273,14 +273,16 @@ function createHooksInternal(config) {
       queryClient
     } = props;
     const event = isServer ? getRequestEvent() : undefined;
+    const client = createMemo(() => createTRPCClient(config?.config(event)));
     return createComponent(Context.Provider, {
       value: {
         abortOnUnmount,
         queryClient,
+        client,
         fetchQuery: (pathAndInput, opts) => {
           return queryClient.fetchQuery({
             queryKey: getArrayQueryKey(pathAndInput),
-            queryFn: wrapFn(() => createTRPCClient(config?.config(event)).query(...getClientArgs(pathAndInput, opts))),
+            queryFn: wrapFn(() => client().query(...getClientArgs(pathAndInput, opts))),
             ...opts
           });
         },
@@ -295,7 +297,7 @@ function createHooksInternal(config) {
                 ...input,
                 cursor: pageParam
               };
-              return createTRPCClient(config?.config(event)).query(...getClientArgs([path, actualInput], opts));
+              return client().query(...getClientArgs([path, actualInput], opts));
             },
             initialPageParam: undefined,
             ...opts
@@ -304,7 +306,7 @@ function createHooksInternal(config) {
         prefetchQuery: (pathAndInput, opts) => {
           return queryClient.prefetchQuery({
             queryKey: getArrayQueryKey(pathAndInput),
-            queryFn: () => createTRPCClient(config?.config(event)).query(...getClientArgs(pathAndInput, opts))
+            queryFn: () => client().query(...getClientArgs(pathAndInput, opts))
           });
         },
         prefetchInfiniteQuery: (pathAndInput, opts) => {
@@ -319,14 +321,14 @@ function createHooksInternal(config) {
                 ...input,
                 cursor: pageParam
               };
-              return createTRPCClient(config?.config(event)).query(...getClientArgs([path, actualInput], opts));
+              return client().query(...getClientArgs([path, actualInput], opts));
             }
           });
         },
         ensureQueryData: (pathAndInput, opts) => {
           return queryClient.ensureQueryData({
             queryKey: getArrayQueryKey(pathAndInput),
-            queryFn: () => createTRPCClient(config?.config(event)).query(...getClientArgs(pathAndInput, opts))
+            queryFn: () => client().query(...getClientArgs(pathAndInput, opts))
           });
         },
         invalidateQueries: (...args) => {
@@ -379,27 +381,27 @@ function createHooksInternal(config) {
     return useContext(Context);
   }
   function useQuery(pathAndInput, opts) {
-    const event = isServer ? getRequestEvent() : undefined;
     const withCtxOpts = () => mergeProps(opts?.() ?? {}, {
       context: SolidQueryContext
     });
+    const ctx = useContext$1();
     return createQuery(() => ({
       queryKey: getArrayQueryKey(pathAndInput()),
       queryFn: wrapFn(() => {
-        return createTRPCClient(config?.config(event)).query(...getClientArgs(pathAndInput(), opts?.()));
+        return ctx.client().query(...getClientArgs(pathAndInput(), opts?.()));
       }),
       ...withCtxOpts()
     }));
   }
   function useMutation(path, opts) {
-    const event = isServer ? getRequestEvent() : undefined;
     const withCtxOpts = () => mergeProps(opts?.(), {
       context: SolidQueryContext
     });
+    const ctx = useContext$1();
     return createMutation(() => ({
       mutationFn: input => {
         const actualPath = Array.isArray(path) ? path[0] : path;
-        return createTRPCClient(config?.config(event)).mutation(...getClientArgs([actualPath, input], opts));
+        return ctx.client().mutation(...getClientArgs([actualPath, input], opts));
       },
       ...withCtxOpts()
     }));
@@ -412,13 +414,13 @@ function createHooksInternal(config) {
    * ⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠
    */
   function useSubscription(pathAndInput, opts) {
+    const ctx = useContext$1();
     return createEffect(on(() => [pathAndInput(), opts?.()], () => {
       if (!(opts().enabled ?? true)) {
         return;
       }
       let isStopped = false;
-      const event = isServer ? getRequestEvent() : undefined;
-      const subscription = createTRPCClient(config?.config(event)).subscription(pathAndInput()[0], pathAndInput()[1] ?? undefined, {
+      const subscription = ctx.client().subscription(pathAndInput()[0], pathAndInput()[1] ?? undefined, {
         onStarted: () => {
           if (!isStopped) {
             opts?.()?.onStarted?.();
@@ -442,10 +444,10 @@ function createHooksInternal(config) {
     }));
   }
   function useInfiniteQuery(pathAndInput, opts) {
-    const event = isServer ? getRequestEvent() : undefined;
     const withCtxOpts = () => mergeProps(opts?.(), {
       context: SolidQueryContext
     });
+    const ctx = useContext$1();
     return createInfiniteQuery(() => ({
       queryKey: getArrayQueryKey(pathAndInput()),
       queryFn: queryFunctionContext => {
@@ -453,7 +455,7 @@ function createHooksInternal(config) {
           ...(pathAndInput()[1] ?? {}),
           cursor: queryFunctionContext.pageParam
         };
-        return createTRPCClient(config?.config(event)).query(...getClientArgs([pathAndInput()[0], actualInput], opts?.()));
+        return ctx.client().query(...getClientArgs([pathAndInput()[0], actualInput], opts?.()));
       },
       ...withCtxOpts()
     }));
diff --git a/dist/index/index.module.js.map b/dist/index/index.module.js.map
old mode 100644
new mode 100755
index f84dd7dc98f6b550e8b3562887e320d01a56f34c..619e0afe2a9438c20f4497742d3b97dd0fe6ad38
--- a/dist/index/index.module.js.map
+++ b/dist/index/index.module.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.module.js","sources":["../../../../node_modules/.pnpm/@trpc+server@10.41.0/node_modules/@trpc/server/dist/codes-c924c3db.mjs","../../../../node_modules/.pnpm/@trpc+server@10.41.0/node_modules/@trpc/server/dist/index-f91d720c.mjs","../../src/internals/getQueryKey.ts","../../src/shared/proxy/decorationProxy.ts","../../src/internals/context.tsx","../../src/shared/proxy/utilsProxy.ts","../../src/internals/getArrayQueryKey.ts","../../src/shared/hooks/createHooksInternal.tsx","../../src/createTRPCSolid.ts","../../src/interop.ts"],"sourcesContent":["/**\n * @internal\n */ function invert(obj) {\n    const newObj = Object.create(null);\n    for(const key in obj){\n        const v = obj[key];\n        newObj[v] = key;\n    }\n    return newObj;\n}\n\n// reference: https://www.jsonrpc.org/specification\n/**\n * JSON-RPC 2.0 Error codes\n *\n * `-32000` to `-32099` are reserved for implementation-defined server-errors.\n * For tRPC we're copying the last digits of HTTP 4XX errors.\n */ const TRPC_ERROR_CODES_BY_KEY = {\n    /**\n   * Invalid JSON was received by the server.\n   * An error occurred on the server while parsing the JSON text.\n   */ PARSE_ERROR: -32700,\n    /**\n   * The JSON sent is not a valid Request object.\n   */ BAD_REQUEST: -32600,\n    // Internal JSON-RPC error\n    INTERNAL_SERVER_ERROR: -32603,\n    NOT_IMPLEMENTED: -32603,\n    // Implementation specific errors\n    UNAUTHORIZED: -32001,\n    FORBIDDEN: -32003,\n    NOT_FOUND: -32004,\n    METHOD_NOT_SUPPORTED: -32005,\n    TIMEOUT: -32008,\n    CONFLICT: -32009,\n    PRECONDITION_FAILED: -32012,\n    PAYLOAD_TOO_LARGE: -32013,\n    UNPROCESSABLE_CONTENT: -32022,\n    TOO_MANY_REQUESTS: -32029,\n    CLIENT_CLOSED_REQUEST: -32099\n};\nconst TRPC_ERROR_CODES_BY_NUMBER = invert(TRPC_ERROR_CODES_BY_KEY);\n\nexport { TRPC_ERROR_CODES_BY_KEY as T, TRPC_ERROR_CODES_BY_NUMBER as a, invert as i };\n","import { i as invert, T as TRPC_ERROR_CODES_BY_KEY } from './codes-c924c3db.mjs';\n\nconst TRPC_ERROR_CODES_BY_NUMBER = invert(TRPC_ERROR_CODES_BY_KEY);\nconst JSONRPC2_TO_HTTP_CODE = {\n    PARSE_ERROR: 400,\n    BAD_REQUEST: 400,\n    UNAUTHORIZED: 401,\n    NOT_FOUND: 404,\n    FORBIDDEN: 403,\n    METHOD_NOT_SUPPORTED: 405,\n    TIMEOUT: 408,\n    CONFLICT: 409,\n    PRECONDITION_FAILED: 412,\n    PAYLOAD_TOO_LARGE: 413,\n    UNPROCESSABLE_CONTENT: 422,\n    TOO_MANY_REQUESTS: 429,\n    CLIENT_CLOSED_REQUEST: 499,\n    INTERNAL_SERVER_ERROR: 500,\n    NOT_IMPLEMENTED: 501\n};\nfunction getStatusCodeFromKey(code) {\n    return JSONRPC2_TO_HTTP_CODE[code] ?? 500;\n}\nfunction getHTTPStatusCode(json) {\n    const arr = Array.isArray(json) ? json : [\n        json\n    ];\n    const httpStatuses = new Set(arr.map((res)=>{\n        if ('error' in res) {\n            const data = res.error.data;\n            if (typeof data.httpStatus === 'number') {\n                return data.httpStatus;\n            }\n            const code = TRPC_ERROR_CODES_BY_NUMBER[res.error.code];\n            return getStatusCodeFromKey(code);\n        }\n        return 200;\n    }));\n    if (httpStatuses.size !== 1) {\n        return 207;\n    }\n    const httpStatus = httpStatuses.values().next().value;\n    return httpStatus;\n}\nfunction getHTTPStatusCodeFromError(error) {\n    return getStatusCodeFromKey(error.code);\n}\n\nconst noop = ()=>{\n// noop\n};\nfunction createInnerProxy(callback, path) {\n    const proxy = new Proxy(noop, {\n        get (_obj, key) {\n            if (typeof key !== 'string' || key === 'then') {\n                // special case for if the proxy is accidentally treated\n                // like a PromiseLike (like in `Promise.resolve(proxy)`)\n                return undefined;\n            }\n            return createInnerProxy(callback, [\n                ...path,\n                key\n            ]);\n        },\n        apply (_1, _2, args) {\n            const isApply = path[path.length - 1] === 'apply';\n            return callback({\n                args: isApply ? args.length >= 2 ? args[1] : [] : args,\n                path: isApply ? path.slice(0, -1) : path\n            });\n        }\n    });\n    return proxy;\n}\n/**\n * Creates a proxy that calls the callback with the path and arguments\n *\n * @internal\n */ const createRecursiveProxy = (callback)=>createInnerProxy(callback, []);\n/**\n * Used in place of `new Proxy` where each handler will map 1 level deep to another value.\n *\n * @internal\n */ const createFlatProxy = (callback)=>{\n    return new Proxy(noop, {\n        get (_obj, name) {\n            if (typeof name !== 'string' || name === 'then') {\n                // special case for if the proxy is accidentally treated\n                // like a PromiseLike (like in `Promise.resolve(proxy)`)\n                return undefined;\n            }\n            return callback(name);\n        }\n    });\n};\n\nexport { TRPC_ERROR_CODES_BY_NUMBER as T, createRecursiveProxy as a, getHTTPStatusCode as b, createFlatProxy as c, getHTTPStatusCodeFromError as g };\n","/**\n * We treat `undefined` as an input the same as omitting an `input`\n * https://github.com/trpc/trpc/issues/2290\n */\nexport function getQueryKey(\n  path: string,\n  input: unknown,\n): [string] | [string, unknown] {\n  return input === undefined ? [path] : [path, input];\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { type AnyRouter } from \"@trpc/server\";\nimport { createRecursiveProxy } from \"@trpc/server/shared\";\nimport { getQueryKey } from \"../../internals/getQueryKey\";\nimport { type CreateSolidQueryHooks } from \"../hooks/createHooksInternal\";\n\n/**\n * Create proxy for decorating procedures\n * @internal\n */\nexport function createSolidProxyDecoration<TRouter extends AnyRouter>(\n  name: string,\n  hooks: CreateSolidQueryHooks<TRouter>\n) {\n  return createRecursiveProxy((opts) => {\n    const args = opts.args;\n\n    const pathCopy = [name, ...opts.path];\n\n    // The last arg is for instance `.useMutation` or `.useQuery()`\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const lastArg = pathCopy.pop()!;\n\n    // The `path` ends up being something like `post.byId`\n    const path = pathCopy.join(\".\");\n    if (lastArg === \"useMutation\") {\n      return (hooks as any)[lastArg](path, ...args);\n    }\n    return (hooks as any)[lastArg](\n      () =>\n        getQueryKey(path, typeof args[0] === \"function\" ? args[0]() : args[0]),\n      args[1]\n    );\n  });\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type {\n  CancelOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  QueryClient,\n  RefetchOptions,\n  RefetchQueryFilters,\n  SetDataOptions,\n  Updater,\n} from '@tanstack/solid-query'\nimport type { TRPCClientError, TRPCRequestOptions } from '@trpc/client'\nimport type {\n  AnyRouter,\n  inferHandlerInput,\n  inferProcedureInput,\n  inferProcedureOutput,\n} from '@trpc/server'\nimport { createContext } from 'solid-js'\n\nexport interface TRPCFetchQueryOptions<TInput, TError, TOutput>\n  extends FetchQueryOptions<TInput, TError, TOutput>,\n    TRPCRequestOptions {}\n\nexport type TRPCFetchInfiniteQueryOptions<TInput, TError, TOutput> =\n  FetchInfiniteQueryOptions<TInput, TError, TOutput> & TRPCRequestOptions\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport interface ProxyTRPCContextProps<_TRouter extends AnyRouter> {\n  /**\n   * Abort loading query calls when unmounting a component - usually when navigating to a new page\n   * @default false\n   */\n  abortOnUnmount?: boolean\n}\n\nexport interface TRPCContextProps<TRouter extends AnyRouter>\n  extends ProxyTRPCContextProps<TRouter> {\n  /**\n   * The react-query `QueryClient`\n   */\n  queryClient: QueryClient\n}\n\nexport const contextProps: (keyof ProxyTRPCContextProps<any>)[] = [\n  'abortOnUnmount',\n]\n\n/** @internal */\nexport interface TRPCContextState<TRouter extends AnyRouter>\n  extends Required<TRPCContextProps<TRouter>> {\n  /**\n   * @link https://tanstack.com/query/v4/docs/reference/QueryClient#queryclientfetchquery\n   */\n  fetchQuery<\n    TPath extends keyof TRouter['_def']['queries'] & string,\n    TProcedure extends TRouter['_def']['queries'][TPath],\n    TOutput extends inferProcedureOutput<TProcedure>,\n    TInput extends inferProcedureInput<TProcedure>\n  >(\n    pathAndInput: [path: TPath, ...args: inferHandlerInput<TProcedure>],\n    opts?: TRPCFetchQueryOptions<TInput, TRPCClientError<TRouter>, TOutput>\n  ): Promise<TOutput>\n  /**\n   * @link https://tanstack.com/query/v4/docs/reference/QueryClient#queryclientfetchinfinitequery\n   */\n  fetchInfiniteQuery<\n    TPath extends keyof TRouter['_def']['queries'] & string,\n    TProcedure extends TRouter['_def']['queries'][TPath],\n    TOutput extends inferProcedureOutput<TProcedure>,\n    TInput extends inferProcedureInput<TProcedure>\n  >(\n    pathAndInput: [path: TPath, ...args: inferHandlerInput<TProcedure>],\n    opts?: TRPCFetchInfiniteQueryOptions<\n      TInput,\n      TRPCClientError<TRouter>,\n      TOutput\n    >\n  ): Promise<InfiniteData<TOutput>>\n  /**\n   * @link https://react-query.tanstack.com/guides/prefetching\n   */\n  prefetchQuery<\n    TPath extends keyof TRouter['_def']['queries'] & string,\n    TProcedure extends TRouter['_def']['queries'][TPath],\n    TOutput extends inferProcedureOutput<TProcedure>,\n    TInput extends inferProcedureInput<TProcedure>\n  >(\n    pathAndInput: [path: TPath, ...args: inferHandlerInput<TProcedure>],\n    opts?: TRPCFetchQueryOptions<TInput, TRPCClientError<TRouter>, TOutput>\n  ): Promise<void>\n\n  /**\n   * @link https://tanstack.com/query/v4/docs/reference/QueryClient#queryclientprefetchinfinitequery\n   */\n  prefetchInfiniteQuery<\n    TPath extends keyof TRouter['_def']['queries'] & string,\n    TProcedure extends TRouter['_def']['queries'][TPath],\n    TOutput extends inferProcedureOutput<TProcedure>,\n    TInput extends inferProcedureInput<TProcedure>\n  >(\n    pathAndInput: [path: TPath, ...args: inferHandlerInput<TProcedure>],\n    opts?: TRPCFetchInfiniteQueryOptions<\n      TInput,\n      TRPCClientError<TRouter>,\n      TOutput\n    >\n  ): Promise<void>\n\n  /**\n   * @link https://tanstack.com/query/latest/docs/reference/QueryClient#queryclientensurequerydata\n   */\n  ensureQueryData<\n    TPath extends keyof TRouter['_def']['queries'] & string,\n    TProcedure extends TRouter['_def']['queries'][TPath],\n    TOutput extends inferProcedureOutput<TProcedure>,\n    TInput extends inferProcedureInput<TProcedure>\n  >(\n    pathAndInput: [path: TPath, ...args: inferHandlerInput<TProcedure>],\n    opts?: TRPCFetchQueryOptions<TInput, TRPCClientError<TRouter>, TOutput>\n  ): Promise<TOutput>\n\n  /**\n   * @link https://react-query.tanstack.com/guides/query-invalidation\n   */\n  invalidateQueries<\n    TPath extends keyof TRouter['_def']['queries'] & string,\n    TInput extends inferProcedureInput<TRouter['_def']['queries'][TPath]>\n  >(\n    pathAndInput?: [TPath, TInput?] | TPath,\n    filters?: InvalidateQueryFilters,\n    options?: InvalidateOptions\n  ): Promise<void>\n  /**\n   * @link https://react-query.tanstack.com/guides/query-invalidation\n   */\n  invalidateQueries(\n    filters?: InvalidateQueryFilters,\n    options?: InvalidateOptions\n  ): Promise<void>\n\n  /**\n   * @link https://react-query.tanstack.com/reference/QueryClient#queryclientrefetchqueries\n   */\n  refetchQueries<\n    TPath extends keyof TRouter['_def']['queries'] & string,\n    TInput extends inferProcedureInput<TRouter['_def']['queries'][TPath]>\n  >(\n    pathAndInput: [TPath, TInput?],\n    filters?: RefetchQueryFilters,\n    options?: RefetchOptions\n  ): Promise<void>\n  /**\n   * @link https://react-query.tanstack.com/reference/QueryClient#queryclientrefetchqueries\n   */\n  refetchQueries(\n    filters?: RefetchQueryFilters,\n    options?: RefetchOptions\n  ): Promise<void>\n\n  /**\n   * @link https://react-query.tanstack.com/guides/query-cancellation\n   */\n  cancelQuery<\n    TPath extends keyof TRouter['_def']['queries'] & string,\n    TInput extends inferProcedureInput<TRouter['_def']['queries'][TPath]>\n  >(\n    pathAndInput: [TPath, TInput?],\n    options?: CancelOptions\n  ): Promise<void>\n  /**\n   * @link https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydata\n   */\n  setQueryData<\n    TPath extends keyof TRouter['_def']['queries'] & string,\n    TInput extends inferProcedureInput<TRouter['_def']['queries'][TPath]>,\n    TOutput extends inferProcedureOutput<TRouter['_def']['queries'][TPath]>\n  >(\n    pathAndInput: [TPath, TInput?],\n    updater: Updater<TOutput | undefined, TOutput | undefined>,\n    options?: SetDataOptions\n  ): void\n  /**\n   * @link https://react-query.tanstack.com/reference/QueryClient#queryclientgetquerydata\n   */\n  getQueryData<\n    TPath extends keyof TRouter['_def']['queries'] & string,\n    TInput extends inferProcedureInput<TRouter['_def']['queries'][TPath]>,\n    TOutput extends inferProcedureOutput<TRouter['_def']['queries'][TPath]>\n  >(\n    pathAndInput: [TPath, TInput?]\n  ): TOutput | undefined\n  /**\n   * @link https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydata\n   */\n  setInfiniteQueryData<\n    TPath extends keyof TRouter['_def']['queries'] & string,\n    TInput extends inferProcedureInput<TRouter['_def']['queries'][TPath]>,\n    TOutput extends inferProcedureOutput<TRouter['_def']['queries'][TPath]>\n  >(\n    pathAndInput: [TPath, TInput?],\n    updater: Updater<\n      InfiniteData<TOutput> | undefined,\n      InfiniteData<TOutput> | undefined\n    >,\n    options?: SetDataOptions\n  ): void\n  /**\n   * @link https://react-query.tanstack.com/reference/QueryClient#queryclientgetquerydata\n   */\n  getInfiniteQueryData<\n    TPath extends keyof TRouter['_def']['queries'] & string,\n    TInput extends inferProcedureInput<TRouter['_def']['queries'][TPath]>,\n    TOutput extends inferProcedureOutput<TRouter['_def']['queries'][TPath]>\n  >(\n    pathAndInput: [TPath, TInput?]\n  ): InfiniteData<TOutput> | undefined\n}\n\nexport const TRPCContext = createContext(null as any)\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type {\n  CancelOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  RefetchOptions,\n  RefetchQueryFilters,\n  SetDataOptions,\n  Updater,\n} from '@tanstack/solid-query'\nimport { type TRPCClientError } from '@trpc/client'\nimport type {\n  AnyQueryProcedure,\n  AnyRouter,\n  Filter,\n  ProcedureOptions,\n  inferProcedureInput,\n  inferProcedureOutput,\n} from '@trpc/server'\nimport { createFlatProxy, createRecursiveProxy } from '@trpc/server/shared'\nimport {\n  type ProxyTRPCContextProps,\n  type TRPCContextState,\n  type TRPCFetchInfiniteQueryOptions,\n  type TRPCFetchQueryOptions,\n  contextProps,\n} from '../../internals/context'\nimport { getQueryKey } from '../../internals/getQueryKey'\n\ntype DecorateProcedure<\n  TRouter extends AnyRouter,\n  TProcedure extends AnyQueryProcedure\n> = {\n  /**\n   * @link https://react-query.tanstack.com/guides/prefetching\n   */\n  fetch(\n    input: inferProcedureInput<TProcedure>,\n    opts?: TRPCFetchQueryOptions<\n      inferProcedureInput<TProcedure>,\n      TRPCClientError<TRouter>,\n      inferProcedureOutput<TProcedure>\n    >\n  ): Promise<inferProcedureOutput<TProcedure>>\n\n  /**\n   * @link https://react-query.tanstack.com/guides/prefetching\n   */\n  fetchInfinite(\n    input: inferProcedureInput<TProcedure>,\n    opts?: TRPCFetchInfiniteQueryOptions<\n      inferProcedureInput<TProcedure>,\n      TRPCClientError<TRouter>,\n      inferProcedureOutput<TProcedure>\n    >\n  ): Promise<InfiniteData<inferProcedureOutput<TProcedure>>>\n\n  /**\n   * @link https://react-query.tanstack.com/guides/prefetching\n   */\n  prefetch(\n    input: inferProcedureInput<TProcedure>,\n    opts?: TRPCFetchQueryOptions<\n      inferProcedureInput<TProcedure>,\n      TRPCClientError<TRouter>,\n      inferProcedureOutput<TProcedure>\n    >\n  ): Promise<void>\n\n  /**\n   * @link https://react-query.tanstack.com/guides/prefetching\n   */\n  prefetchInfinite(\n    input: inferProcedureInput<TProcedure>,\n    procedureOpts?: ProcedureOptions,\n    opts?: TRPCFetchInfiniteQueryOptions<\n      inferProcedureInput<TProcedure>,\n      TRPCClientError<TRouter>,\n      inferProcedureOutput<TProcedure>\n    >\n  ): Promise<void>\n\n  /**\n   * @link https://react-query.tanstack.com/guides/query-invalidation\n   */\n  invalidate(\n    input?: inferProcedureInput<TProcedure>,\n    filters?: InvalidateQueryFilters,\n    options?: InvalidateOptions\n  ): Promise<void>\n\n  /**\n   * @link https://react-query.tanstack.com/reference/QueryClient#queryclientrefetchqueries\n   */\n  refetch(\n    input?: inferProcedureInput<TProcedure>,\n    filters?: RefetchQueryFilters,\n    options?: RefetchOptions\n  ): Promise<void>\n\n  /**\n   * @link https://react-query.tanstack.com/guides/query-cancellation\n   */\n  cancel(\n    input?: inferProcedureInput<TProcedure>,\n    options?: CancelOptions\n  ): Promise<void>\n\n  /**\n   * @link https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydata\n   */\n  setData(\n    updater: Updater<\n      inferProcedureOutput<TProcedure> | undefined,\n      inferProcedureOutput<TProcedure> | undefined\n    >,\n    input?: inferProcedureInput<TProcedure>,\n    options?: SetDataOptions\n  ): void\n\n  /**\n   * @link https://react-query.tanstack.com/reference/QueryClient#queryclientgetquerydata\n   */\n  setInfiniteData(\n    updater: Updater<\n      InfiniteData<inferProcedureOutput<TProcedure>> | undefined,\n      InfiniteData<inferProcedureOutput<TProcedure>> | undefined\n    >,\n    input?: inferProcedureInput<TProcedure>,\n    options?: SetDataOptions\n  ): void\n\n  /**\n   * @link https://react-query.tanstack.com/reference/QueryClient#queryclientgetquerydata\n   */\n  getData(\n    input?: inferProcedureInput<TProcedure>\n  ): inferProcedureOutput<TProcedure> | undefined\n\n  /**\n   * @link https://react-query.tanstack.com/reference/QueryClient#queryclientgetquerydata\n   */\n  getInfiniteData(\n    input?: inferProcedureInput<TProcedure>\n  ): InfiniteData<inferProcedureOutput<TProcedure>> | undefined\n\n  /**\n   * @link https://react-query.tanstack.com/guides/prefetching\n   */\n  ensureData(\n    input: inferProcedureInput<TProcedure>,\n    opts?: TRPCFetchQueryOptions<\n      inferProcedureInput<TProcedure>,\n      TRPCClientError<TRouter>,\n      inferProcedureOutput<TProcedure>\n    >\n  ): Promise<inferProcedureOutput<TProcedure>>\n}\n\n/**\n * A type that will traverse all procedures and sub routers of a given router to create a union of\n * their possible input types\n */\ntype InferAllRouterQueryInputTypes<TRouter extends AnyRouter> = {\n  [TKey in keyof Filter<\n    TRouter['_def']['record'],\n    AnyRouter | AnyQueryProcedure\n  >]: TRouter['_def']['record'][TKey] extends AnyQueryProcedure\n    ? inferProcedureInput<TRouter['_def']['record'][TKey]>\n    : InferAllRouterQueryInputTypes<TRouter['_def']['record'][TKey]> // Recurse as we have a sub router!\n}[keyof Filter<TRouter['_def']['record'], AnyRouter | AnyQueryProcedure>] // This flattens results into a big union\n\n/**\n * this is the type that is used to add in procedures that can be used on\n * an entire router\n */\ntype DecorateRouterProcedure<TRouter extends AnyRouter> = {\n  /**\n   * @link https://react-query.tanstack.com/guides/query-invalidation\n   */\n  invalidate(\n    input?: Partial<InferAllRouterQueryInputTypes<TRouter>>,\n    filters?: InvalidateQueryFilters,\n    options?: InvalidateOptions\n  ): Promise<void>\n}\n\n/**\n * @internal\n */\nexport type DecoratedProcedureUtilsRecord<TRouter extends AnyRouter> = {\n  [TKey in keyof Filter<\n    TRouter['_def']['record'],\n    AnyRouter | AnyQueryProcedure\n  >]: TRouter['_def']['record'][TKey] extends AnyRouter\n    ? DecoratedProcedureUtilsRecord<TRouter['_def']['record'][TKey]> &\n        DecorateRouterProcedure<TRouter['_def']['record'][TKey]>\n    : // utils only apply to queries\n      DecorateProcedure<TRouter, TRouter['_def']['record'][TKey]>\n} & DecorateRouterProcedure<TRouter> // Add functions that should be available at utils root\n\ntype AnyDecoratedProcedure = DecorateProcedure<any, any>\n\nexport type CreateSolidUtilsProxy<TRouter extends AnyRouter> =\n  DecoratedProcedureUtilsRecord<TRouter> & ProxyTRPCContextProps<TRouter>\n\n/**\n * @internal\n */\nexport function createSolidQueryUtilsProxy<TRouter extends AnyRouter>(\n  context: TRPCContextState<AnyRouter>\n) {\n  type CreateSolidUtilsProxyReturnType = CreateSolidUtilsProxy<TRouter>\n\n  return createFlatProxy<CreateSolidUtilsProxyReturnType>((key) => {\n    const contextName = key as typeof contextProps[number]\n    if (contextProps.includes(contextName)) {\n      return context[contextName]\n    }\n\n    return createRecursiveProxy(({ path, args }) => {\n      const pathCopy = [key, ...path]\n      const utilName = pathCopy.pop() as keyof AnyDecoratedProcedure\n\n      const fullPath = pathCopy.join('.')\n\n      const getOpts = (name: typeof utilName) => {\n        if (['setData', 'setInfiniteData'].includes(name)) {\n          const [updater, input, ...rest] = args as Parameters<\n            AnyDecoratedProcedure[typeof utilName]\n          >\n          const queryKey = getQueryKey(fullPath, input)\n          return {\n            queryKey,\n            updater,\n            rest,\n          }\n        }\n\n        const [input, ...rest] = args as Parameters<\n          AnyDecoratedProcedure[typeof utilName]\n        >\n        const queryKey = getQueryKey(fullPath, input)\n        return {\n          queryKey,\n          rest,\n        }\n      }\n\n      const { queryKey, rest, updater } = getOpts(utilName)\n\n      const contextMap: Record<keyof AnyDecoratedProcedure, () => unknown> = {\n        fetch: () => context.fetchQuery(queryKey, ...rest),\n        fetchInfinite: () => context.fetchInfiniteQuery(queryKey, ...rest),\n        prefetch: () => context.prefetchQuery(queryKey, ...rest),\n        prefetchInfinite: () =>\n          context.prefetchInfiniteQuery(queryKey, ...rest),\n        ensureData: () => context.ensureQueryData(queryKey, ...rest),\n        invalidate: () => context.invalidateQueries(queryKey, ...rest),\n        refetch: () => context.refetchQueries(queryKey, ...rest),\n        cancel: () => context.cancelQuery(queryKey, ...rest),\n        setData: () => context.setQueryData(queryKey, updater, ...rest),\n        setInfiniteData: () =>\n          context.setInfiniteQueryData(queryKey, updater, ...rest),\n        getData: () => context.getQueryData(queryKey),\n        getInfiniteData: () => context.getInfiniteQueryData(queryKey),\n      }\n\n      return contextMap[utilName]()\n    })\n  })\n}\n","/**\n * To allow easy interactions with groups of related queries, such as\n * invalidating all queries of a router, we use an array as the path when\n * storing in tanstack query. This function converts from the `.` separated\n * path passed around internally by both the legacy and proxy implementation.\n * https://github.com/trpc/trpc/issues/2611\n */\nexport function getArrayQueryKey(\n  queryKey: string | [string] | [string, ...unknown[]] | unknown[],\n): [string[]] | [string[], ...unknown[]] | [] {\n  const queryKeyArrayed = Array.isArray(queryKey) ? queryKey : [queryKey];\n  const [path, ...input] = queryKeyArrayed;\n\n  const arrayPath =\n    typeof path !== 'string' || path === '' ? [] : path.split('.');\n\n  return [arrayPath, ...input];\n}\n","/* eslint-disable solid/reactivity */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n  type DehydratedState,\n  type CreateInfiniteQueryResult,\n  type CreateMutationOptions,\n  type CreateMutationResult,\n  type CreateQueryResult,\n  createInfiniteQuery as __useInfiniteQuery,\n  createMutation as __useMutation,\n  createQuery as __useQuery,\n  type QueryClientProviderProps,\n  type QueryClient,\n  InfiniteData,\n} from '@tanstack/solid-query'\nimport {\n  type CreateTRPCClientOptions,\n  type TRPCClient,\n  type TRPCClientErrorLike,\n  createTRPCClient,\n} from '@trpc/client'\nimport type {\n  AnyRouter,\n  ProcedureRecord,\n  inferHandlerInput,\n  inferProcedureClientError,\n  inferProcedureInput,\n  inferProcedureOutput,\n  inferSubscriptionOutput,\n} from '@trpc/server'\nimport { type inferObservableValue } from '@trpc/server/observable'\nimport {\n  type Accessor,\n  type Context,\n  createEffect,\n  type JSX,\n  mergeProps,\n  onCleanup,\n  useContext as __useContext,\n  on,\n} from 'solid-js'\nimport { isServer } from 'solid-js/web'\nimport {\n  TRPCContext,\n  type TRPCContextProps,\n  type TRPCContextState,\n} from '../../internals/context'\nimport { getArrayQueryKey } from '../../internals/getArrayQueryKey'\nimport { type CreateTRPCSolidOptions } from '../types'\nimport {\n  type UseTRPCQueryOptions,\n  type UseTRPCInfiniteQueryOptions,\n  type TRPCUseQueryBaseOptions,\n} from './types'\nimport { getRequestEvent } from 'solid-js/web'\nexport type OutputWithCursor<TData, TCursor = any> = {\n  cursor: TCursor | null\n  data: TData\n}\n\nexport type { TRPCContext, TRPCContextState } from '../../internals/context'\n\nexport interface UseTRPCMutationOptions<\n  TInput,\n  TError,\n  TOutput,\n  TContext = unknown\n> extends CreateMutationOptions<TOutput, TError, TInput, TContext>,\n    TRPCUseQueryBaseOptions {}\n\nexport interface UseTRPCSubscriptionOptions<TOutput, TError> {\n  enabled?: boolean\n  onStarted?: () => void\n  onData: (data: TOutput) => void\n  onError?: (err: TError) => void\n}\n\nfunction getClientArgs<TPathAndInput extends unknown[], TOptions>(\n  pathAndInput: TPathAndInput,\n  opts: TOptions\n) {\n  const [path, input] = pathAndInput\n  return [path, input, (opts as any)?.trpc] as const\n}\n\ntype inferInfiniteQueryNames<TObj extends ProcedureRecord> = {\n  [TPath in keyof TObj]: inferProcedureInput<TObj[TPath]> extends {\n    cursor?: any\n  }\n    ? TPath\n    : never\n}[keyof TObj]\n\ntype inferProcedures<TObj extends ProcedureRecord> = {\n  [TPath in keyof TObj]: {\n    input: inferProcedureInput<TObj[TPath]>\n    output: inferProcedureOutput<TObj[TPath]>\n  }\n}\n\nexport interface TRPCProviderProps<TRouter extends AnyRouter>\n  extends TRPCContextProps<TRouter> {\n  children: JSX.Element\n}\n\nexport type TRPCProvider<TRouter extends AnyRouter> = (\n  props: Omit<TRPCProviderProps<TRouter>, 'client'> & {\n    queryClientOpts?: Omit<QueryClientProviderProps, 'client'>\n  }\n) => JSX.Element\n\nexport type UseDehydratedState<TRouter extends AnyRouter> = (\n  client: TRPCClient<TRouter>,\n  trpcState: DehydratedState | undefined\n) => Accessor<DehydratedState | undefined>\n\nexport type CreateClient<TRouter extends AnyRouter> = (\n  opts: (\n    event?: ReturnType<typeof getRequestEvent>\n  ) => CreateTRPCClientOptions<TRouter>\n) => TRPCClient<TRouter>\n\ninterface TRPCHookResult {\n  trpc: {\n    path: string\n  }\n}\n\n/**\n * @internal\n */\nexport type UseTRPCQueryResult<TData, TError> = CreateQueryResult<\n  TData,\n  TError\n> &\n  TRPCHookResult\n\n/**\n * @internal\n */\nexport type UseTRPCInfiniteQueryResult<TData, TError> =\n  CreateInfiniteQueryResult<InfiniteData<TData>, TError> & TRPCHookResult\n\n/**\n * @internal\n */\nexport type UseTRPCMutationResult<TData, TError, TVariables, TContext> =\n  CreateMutationResult<TData, TError, TVariables, TContext> & TRPCHookResult\n\n/**\n * Create strongly typed react hooks\n * @internal\n */\nexport function createHooksInternal<TRouter extends AnyRouter>(\n  config?: CreateTRPCSolidOptions<TRouter>\n) {\n  // const mutationSuccessOverride: UseMutationOverride[\"onSuccess\"] =\n  //   config?.unstable_overrides?.useMutation?.onSuccess ??\n  //   ((options) => options.originalFn());\n\n  type TQueries = TRouter['_def']['queries']\n  type TSubscriptions = TRouter['_def']['subscriptions']\n  type TMutations = TRouter['_def']['mutations']\n\n  type TError = TRPCClientErrorLike<TRouter>\n  type TInfiniteQueryNames = inferInfiniteQueryNames<TQueries>\n\n  type TQueryValues = inferProcedures<TQueries>\n  type TMutationValues = inferProcedures<TMutations>\n\n  const Context = (config?.context ?? TRPCContext) as Context<\n    TRPCContextState<TRouter>\n  >\n  const SolidQueryContext = config?.solidQueryContext as Context<\n    QueryClient | undefined\n  >\n\n  function wrapFn<Fn extends (...args: any[]) => any>(fn: Fn) {\n    return async (...args: Parameters<Fn>) => {\n      const results = await fn(...args)\n      // console.log({ results })\n      return results\n    }\n  }\n\n  const TRPCProvider: TRPCProvider<TRouter> = (props) => {\n    const { abortOnUnmount = false, queryClient } = props\n    const event = isServer ? getRequestEvent() : undefined\n    return (\n      <Context.Provider\n        value={{\n          abortOnUnmount,\n          queryClient,\n          fetchQuery: (pathAndInput, opts) => {\n            return queryClient.fetchQuery({\n              queryKey: getArrayQueryKey(pathAndInput),\n              queryFn: wrapFn(() =>\n                (createTRPCClient(config?.config(event) as any) as any).query(\n                  ...getClientArgs(pathAndInput, opts)\n                )\n              ),\n              ...opts,\n            })\n          },\n          fetchInfiniteQuery: (pathAndInput, opts) => {\n            return queryClient.fetchInfiniteQuery({\n              queryKey: getArrayQueryKey(pathAndInput),\n              queryFn: ({ pageParam }) => {\n                const [path, input] = pathAndInput\n                const actualInput = { ...(input as any), cursor: pageParam }\n                return (\n                  createTRPCClient(config?.config(event) as any) as any\n                ).query(...getClientArgs([path, actualInput], opts))\n              },\n              initialPageParam: undefined,\n              ...opts,\n            })\n          },\n\n          prefetchQuery: (pathAndInput, opts) => {\n            return queryClient.prefetchQuery({\n              queryKey: getArrayQueryKey(pathAndInput),\n              queryFn: () =>\n                (createTRPCClient(config?.config(event) as any) as any).query(\n                  ...getClientArgs(pathAndInput, opts)\n                ),\n            })\n          },\n          prefetchInfiniteQuery: (pathAndInput, opts) => {\n            return queryClient.prefetchInfiniteQuery({\n              queryKey: getArrayQueryKey(pathAndInput),\n              initialPageParam: undefined,\n              queryFn: ({ pageParam }) => {\n                const [path, input] = pathAndInput\n                const actualInput = { ...(input as any), cursor: pageParam }\n                return (\n                  createTRPCClient(config?.config(event) as any) as any\n                ).query(...getClientArgs([path, actualInput], opts))\n              },\n            })\n          },\n          ensureQueryData: (pathAndInput, opts) => {\n            return queryClient.ensureQueryData({\n              queryKey: getArrayQueryKey(pathAndInput),\n              queryFn: () =>\n                (createTRPCClient(config?.config(event) as any) as any).query(\n                  ...getClientArgs(pathAndInput, opts)\n                ),\n            })\n          },\n          invalidateQueries: (...args: any[]) => {\n            const [queryKey, ...rest] = args\n            return queryClient.invalidateQueries({\n              queryKey: getArrayQueryKey(queryKey),\n              ...rest,\n            })\n          },\n          refetchQueries: (...args: any[]) => {\n            const [queryKey, ...rest] = args\n            return queryClient.refetchQueries({\n              queryKey: getArrayQueryKey(queryKey),\n              ...rest,\n            })\n          },\n          cancelQuery: (pathAndInput) => {\n            return queryClient.cancelQueries({\n              queryKey: getArrayQueryKey(pathAndInput),\n            })\n          },\n          setQueryData: (...args) => {\n            const [queryKey, ...rest] = args\n            return queryClient.setQueryData(\n              getArrayQueryKey(queryKey),\n              (input) => {\n                if (typeof rest[0] === 'function') {\n                  return (rest[0] as any)(input)\n                }\n                return rest[0]\n              }\n            )\n          },\n          getQueryData: (...args) => {\n            const [queryKey, ...rest] = args\n\n            return queryClient.getQueryData(getArrayQueryKey(queryKey), ...rest)\n          },\n          setInfiniteQueryData: (...args) => {\n            const [queryKey, ...rest] = args\n\n            return queryClient.setQueryData(\n              getArrayQueryKey(queryKey),\n              rest as any\n            )\n          },\n          getInfiniteQueryData: (...args) => {\n            const [queryKey, ...rest] = args\n\n            return queryClient.getQueryData(getArrayQueryKey(queryKey), ...rest)\n          },\n        }}\n      >\n        {props.children}\n      </Context.Provider>\n    )\n  }\n\n  function useContext() {\n    return __useContext(Context)\n  }\n\n  function useQuery<\n    TPath extends keyof TQueryValues & string,\n    TQueryFnData = TQueryValues[TPath]['output'],\n    TData = TQueryValues[TPath]['output']\n  >(\n    pathAndInput: () => [\n      path: TPath,\n      ...args: inferHandlerInput<TQueries[TPath]>\n    ],\n    opts?: UseTRPCQueryOptions<\n      TPath,\n      TQueryValues[TPath]['input'],\n      TQueryFnData,\n      TData,\n      TError\n    >\n  ): UseTRPCQueryResult<TData, TError> {\n    const event = isServer ? getRequestEvent() : undefined\n    const withCtxOpts = () =>\n      mergeProps(opts?.() ?? {}, {\n        context: SolidQueryContext,\n      })\n    return __useQuery(() => ({\n      queryKey: getArrayQueryKey(pathAndInput()),\n      queryFn: wrapFn(() => {\n        return (createTRPCClient(config?.config(event) as any) as any).query(\n          ...getClientArgs(pathAndInput(), opts?.())\n        )\n      }),\n      ...(withCtxOpts() as any),\n    })) as UseTRPCQueryResult<TData, TError>\n  }\n\n  function useMutation<\n    TPath extends keyof TMutationValues & string,\n    TContext = unknown\n  >(\n    path: TPath | [TPath],\n    opts?: () => UseTRPCMutationOptions<\n      TMutationValues[TPath]['input'],\n      TError,\n      TMutationValues[TPath]['output'],\n      TContext\n    >\n  ): UseTRPCMutationResult<\n    TMutationValues[TPath]['output'],\n    TError,\n    TMutationValues[TPath]['input'],\n    TContext\n  > {\n    const event = isServer ? getRequestEvent() : undefined\n    const withCtxOpts = () =>\n      mergeProps(opts?.(), {\n        context: SolidQueryContext,\n      })\n    return __useMutation(() => ({\n      mutationFn: (input) => {\n        const actualPath = Array.isArray(path) ? path[0] : path\n\n        return (createTRPCClient(config?.config(event) as any) as any).mutation(\n          ...getClientArgs([actualPath, input], opts)\n        )\n      },\n      ...withCtxOpts(),\n    })) as UseTRPCMutationResult<\n      TMutationValues[TPath]['output'],\n      TError,\n      TMutationValues[TPath]['input'],\n      TContext\n    >\n  }\n\n  /* istanbul ignore next */\n  /**\n   * ⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️\n   *  **Experimental.** API might change without major version bump\n   * ⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠\n   */\n  function useSubscription<\n    TPath extends keyof TSubscriptions & string,\n    TOutput extends inferSubscriptionOutput<TRouter, TPath>\n  >(\n    pathAndInput: () => [\n      path: TPath,\n      ...args: inferHandlerInput<TSubscriptions[TPath]>\n    ],\n    opts: () => UseTRPCSubscriptionOptions<\n      inferObservableValue<inferProcedureOutput<TSubscriptions[TPath]>>,\n      inferProcedureClientError<TSubscriptions[TPath]>\n    >\n  ) {\n    return createEffect(\n      on(\n        () => [pathAndInput(), opts?.()],\n        () => {\n          if (!(opts().enabled ?? true)) {\n            return\n          }\n          let isStopped = false\n          const event = isServer ? getRequestEvent() : undefined\n          const subscription = createTRPCClient(\n            config?.config(event) as any\n          ).subscription<\n            TRouter['_def']['subscriptions'],\n            TPath,\n            TOutput,\n            inferProcedureInput<TRouter['_def']['subscriptions'][TPath]>\n          >(pathAndInput()[0], (pathAndInput()[1] ?? undefined) as any, {\n            onStarted: () => {\n              if (!isStopped) {\n                opts?.()?.onStarted?.()\n              }\n            },\n            onData: (data) => {\n              if (!isStopped) {\n                opts?.()?.onData(data)\n              }\n            },\n            onError: (err) => {\n              if (!isStopped) {\n                opts?.()?.onError?.(err)\n              }\n            },\n          })\n          onCleanup(() => {\n            isStopped = true\n            subscription.unsubscribe()\n          })\n        }\n      )\n    )\n  }\n\n  function useInfiniteQuery<TPath extends TInfiniteQueryNames & string>(\n    pathAndInput: () => [\n      path: TPath,\n      input: Omit<TQueryValues[TPath]['input'], 'cursor'>\n    ],\n    opts?: UseTRPCInfiniteQueryOptions<\n      TPath,\n      Omit<TQueryValues[TPath]['input'], 'cursor'>,\n      TQueryValues[TPath]['output'],\n      TError\n    >\n  ): UseTRPCInfiniteQueryResult<TQueryValues[TPath]['output'], TError> {\n    const event = isServer ? getRequestEvent() : undefined\n    const withCtxOpts = () =>\n      mergeProps(opts?.(), {\n        context: SolidQueryContext,\n      })\n    return __useInfiniteQuery(() => ({\n      queryKey: getArrayQueryKey(pathAndInput()),\n      queryFn: (queryFunctionContext) => {\n        const actualInput = {\n          ...((pathAndInput()[1] as any) ?? {}),\n          cursor: queryFunctionContext.pageParam,\n        }\n\n        return (createTRPCClient(config?.config(event) as any) as any).query(\n          ...getClientArgs([pathAndInput()[0], actualInput], opts?.())\n        )\n      },\n      ...(withCtxOpts() as any),\n    })) as UseTRPCInfiniteQueryResult<TQueryValues[TPath]['output'], TError>\n  }\n  return {\n    Provider: TRPCProvider,\n    useContext,\n    useQuery,\n    useMutation,\n    useSubscription,\n    useInfiniteQuery,\n  }\n}\n\n/**\n * Hack to infer the type of `createReactQueryHooks`\n * @link https://stackoverflow.com/a/59072991\n */\nclass GnClass<TRouter extends AnyRouter> {\n  fn() {\n    return createHooksInternal<TRouter>()\n  }\n}\n\ntype returnTypeInferer<TType> = TType extends (\n  a: Record<string, string>\n) => infer U\n  ? U\n  : never\ntype fooType<TRouter extends AnyRouter> = GnClass<TRouter>['fn']\n\n/**\n * Infer the type of a `createSolidQueryHooks` function\n * @internal\n */\nexport type CreateSolidQueryHooks<TRouter extends AnyRouter> =\n  returnTypeInferer<fooType<TRouter>>\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { type TRPCClientErrorLike } from \"@trpc/client\";\nimport type {\n  AnyMutationProcedure,\n  AnyProcedure,\n  AnyQueryProcedure,\n  AnyRouter,\n  AnySubscriptionProcedure,\n  ProcedureRouterRecord,\n  inferProcedureInput,\n  inferProcedureOutput,\n} from \"@trpc/server\";\nimport { type inferObservableValue } from \"@trpc/server/observable\";\nimport { createFlatProxy } from \"@trpc/server/shared\";\nimport {\n  type CreateSolidUtilsProxy,\n  createSolidProxyDecoration,\n  createSolidQueryUtilsProxy,\n} from \"./shared\";\nimport {\n  type CreateClient,\n  type CreateSolidQueryHooks,\n  type TRPCProvider,\n  type UseDehydratedState,\n  type UseTRPCInfiniteQueryResult,\n  type UseTRPCMutationOptions,\n  type UseTRPCMutationResult,\n  type UseTRPCQueryResult,\n  type UseTRPCSubscriptionOptions,\n  createHooksInternal,\n} from \"./shared/hooks/createHooksInternal\";\nimport {\n  type UseTRPCInfiniteQueryOptions,\n  type UseTRPCQueryOptions,\n} from \"./shared/hooks/types\";\nimport { type CreateTRPCSolidOptions } from \"./shared/types\";\n\nexport type FixProcedureInput<T> = T extends void | undefined\n  ? void | undefined\n  : () => T;\n/**\n * @internal\n */\nexport type DecorateProcedure<\n  TProcedure extends AnyProcedure,\n  TPath extends string\n> = TProcedure extends AnyQueryProcedure\n  ? {\n      useQuery: <\n        TQueryFnData = inferProcedureOutput<TProcedure>,\n        TData = inferProcedureOutput<TProcedure>\n      >(\n        input: FixProcedureInput<inferProcedureInput<TProcedure>>,\n        opts?: UseTRPCQueryOptions<\n          TPath,\n          inferProcedureInput<TProcedure>,\n          TQueryFnData,\n          TData,\n          TRPCClientErrorLike<TProcedure>\n        >\n      ) => UseTRPCQueryResult<TData, TRPCClientErrorLike<TProcedure>>;\n    } & (inferProcedureInput<TProcedure> extends { cursor?: any }\n      ? {\n          useInfiniteQuery: <\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            _TQueryFnData = inferProcedureOutput<TProcedure>,\n            TData = inferProcedureOutput<TProcedure>\n          >(\n            input: FixProcedureInput<\n              Omit<inferProcedureInput<TProcedure>, \"cursor\">\n            >,\n            opts?: UseTRPCInfiniteQueryOptions<\n              TPath,\n              inferProcedureInput<TProcedure>,\n              TData,\n              TRPCClientErrorLike<TProcedure>\n            >\n          ) => UseTRPCInfiniteQueryResult<\n            TData,\n            TRPCClientErrorLike<TProcedure>\n          >;\n        }\n      : // eslint-disable-next-line @typescript-eslint/ban-types\n        {})\n  : TProcedure extends AnyMutationProcedure\n  ? {\n      useMutation: <TContext = unknown>(\n        opts?: UseTRPCMutationOptions<\n          inferProcedureInput<TProcedure>,\n          TRPCClientErrorLike<TProcedure>,\n          inferProcedureOutput<TProcedure>,\n          TContext\n        >\n      ) => UseTRPCMutationResult<\n        inferProcedureOutput<TProcedure>,\n        TRPCClientErrorLike<TProcedure>,\n        inferProcedureInput<TProcedure>,\n        TContext\n      >;\n    }\n  : TProcedure extends AnySubscriptionProcedure\n  ? {\n      useSubscription: (\n        input: FixProcedureInput<inferProcedureInput<TProcedure>>,\n        opts?: () => UseTRPCSubscriptionOptions<\n          inferObservableValue<inferProcedureOutput<TProcedure>>,\n          TRPCClientErrorLike<TProcedure>\n        >\n      ) => void;\n    }\n  : never;\n\n/**\n * @internal\n */\nexport type DecoratedProcedureRecord<\n  TProcedures extends ProcedureRouterRecord,\n  TPath extends string = \"\"\n> = {\n  [TKey in keyof TProcedures]: TProcedures[TKey] extends AnyRouter\n    ? DecoratedProcedureRecord<\n        TProcedures[TKey][\"_def\"][\"record\"],\n        `${TPath}${TKey & string}.`\n      >\n    : TProcedures[TKey] extends AnyProcedure\n    ? DecorateProcedure<TProcedures[TKey], `${TPath}${TKey & string}`>\n    : never;\n};\n\nexport type CreateTRPCSolidStart<TRouter extends AnyRouter> = {\n  useContext(): CreateSolidUtilsProxy<TRouter>;\n  Provider: TRPCProvider<TRouter>;\n  createClient: CreateClient<TRouter>;\n  useDehydratedState: UseDehydratedState<TRouter>;\n} & DecoratedProcedureRecord<TRouter[\"_def\"][\"record\"]>;\n\n/**\n * @internal\n */\nexport function createHooksInternalProxy<TRouter extends AnyRouter>(\n  trpc: CreateSolidQueryHooks<TRouter>\n) {\n  type CreateHooksInternalProxy = CreateTRPCSolidStart<TRouter>;\n\n  return createFlatProxy<CreateHooksInternalProxy>((key) => {\n    if (key === \"useContext\") {\n      return () => {\n        const context = trpc.useContext();\n        // create a stable reference of the utils context\n        return (createSolidQueryUtilsProxy as any)(context as any);\n      };\n    }\n\n    if ((key as string) in trpc) {\n      return (trpc as any)[key];\n    }\n\n    return createSolidProxyDecoration(key as string, trpc);\n  });\n}\n\nexport function createTRPCSolidStart<TRouter extends AnyRouter>(\n  opts?: CreateTRPCSolidOptions<TRouter>\n) {\n  const hooks = createHooksInternal<TRouter>(opts);\n  const proxy = createHooksInternalProxy<TRouter>(hooks);\n\n  return proxy;\n}\n","// interop:\nimport { type AnyRouter } from '@trpc/server'\nimport {\n  type CreateTRPCSolidStart,\n  createHooksInternalProxy,\n} from './createTRPCSolid'\nimport { type CreateTRPCSolidOptions } from './shared'\nimport {\n  type CreateSolidQueryHooks,\n  createHooksInternal,\n} from './shared/hooks/createHooksInternal'\n\n/**\n * @deprecated use `createTRPCSolid` instead\n */\nexport function createSolidQueryHooks<TRouter extends AnyRouter>(\n  opts?: CreateTRPCSolidOptions<TRouter>\n): CreateSolidQueryHooks<TRouter> & {\n  proxy: CreateTRPCSolidStart<TRouter>\n} {\n  const trpc = createHooksInternal<TRouter>(opts)\n  const proxy = createHooksInternalProxy<TRouter>(trpc)\n\n  return {\n    ...trpc,\n    proxy,\n  }\n}\n"],"names":["getQueryKey","path","input","undefined","createSolidProxyDecoration","name","hooks","createRecursiveProxy","opts","args","pathCopy","lastArg","pop","join","contextProps","TRPCContext","createContext","createSolidQueryUtilsProxy","context","createFlatProxy","key","contextName","includes","utilName","fullPath","getOpts","updater","rest","queryKey","contextMap","fetch","fetchQuery","fetchInfinite","fetchInfiniteQuery","prefetch","prefetchQuery","prefetchInfinite","prefetchInfiniteQuery","ensureData","ensureQueryData","invalidate","invalidateQueries","refetch","refetchQueries","cancel","cancelQuery","setData","setQueryData","setInfiniteData","setInfiniteQueryData","getData","getQueryData","getInfiniteData","getInfiniteQueryData","getArrayQueryKey","queryKeyArrayed","Array","isArray","arrayPath","split","getClientArgs","pathAndInput","trpc","createHooksInternal","config","Context","SolidQueryContext","solidQueryContext","wrapFn","fn","results","TRPCProvider","props","abortOnUnmount","queryClient","event","isServer","getRequestEvent","_$createComponent","Provider","value","queryFn","createTRPCClient","query","pageParam","actualInput","cursor","initialPageParam","cancelQueries","children","useContext","__useContext","useQuery","withCtxOpts","mergeProps","__useQuery","useMutation","__useMutation","mutationFn","actualPath","mutation","useSubscription","createEffect","on","enabled","isStopped","subscription","onStarted","onData","data","onError","err","onCleanup","unsubscribe","useInfiniteQuery","__useInfiniteQuery","queryFunctionContext","createHooksInternalProxy","createTRPCSolidStart","proxy","createSolidQueryHooks"],"mappings":"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","x_google_ignoreList":[0,1]}
\ No newline at end of file
+{"version":3,"file":"index.module.js","sources":["../../../../node_modules/.pnpm/@trpc+server@10.41.0/node_modules/@trpc/server/dist/codes-c924c3db.mjs","../../../../node_modules/.pnpm/@trpc+server@10.41.0/node_modules/@trpc/server/dist/index-f91d720c.mjs","../../src/internals/getQueryKey.ts","../../src/shared/proxy/decorationProxy.ts","../../src/internals/context.tsx","../../src/shared/proxy/utilsProxy.ts","../../src/internals/getArrayQueryKey.ts","../../src/shared/hooks/createHooksInternal.tsx","../../src/createTRPCSolid.ts","../../src/interop.ts"],"sourcesContent":["/**\n * @internal\n */ function invert(obj) {\n    const newObj = Object.create(null);\n    for(const key in obj){\n        const v = obj[key];\n        newObj[v] = key;\n    }\n    return newObj;\n}\n\n// reference: https://www.jsonrpc.org/specification\n/**\n * JSON-RPC 2.0 Error codes\n *\n * `-32000` to `-32099` are reserved for implementation-defined server-errors.\n * For tRPC we're copying the last digits of HTTP 4XX errors.\n */ const TRPC_ERROR_CODES_BY_KEY = {\n    /**\n   * Invalid JSON was received by the server.\n   * An error occurred on the server while parsing the JSON text.\n   */ PARSE_ERROR: -32700,\n    /**\n   * The JSON sent is not a valid Request object.\n   */ BAD_REQUEST: -32600,\n    // Internal JSON-RPC error\n    INTERNAL_SERVER_ERROR: -32603,\n    NOT_IMPLEMENTED: -32603,\n    // Implementation specific errors\n    UNAUTHORIZED: -32001,\n    FORBIDDEN: -32003,\n    NOT_FOUND: -32004,\n    METHOD_NOT_SUPPORTED: -32005,\n    TIMEOUT: -32008,\n    CONFLICT: -32009,\n    PRECONDITION_FAILED: -32012,\n    PAYLOAD_TOO_LARGE: -32013,\n    UNPROCESSABLE_CONTENT: -32022,\n    TOO_MANY_REQUESTS: -32029,\n    CLIENT_CLOSED_REQUEST: -32099\n};\nconst TRPC_ERROR_CODES_BY_NUMBER = invert(TRPC_ERROR_CODES_BY_KEY);\n\nexport { TRPC_ERROR_CODES_BY_KEY as T, TRPC_ERROR_CODES_BY_NUMBER as a, invert as i };\n","import { i as invert, T as TRPC_ERROR_CODES_BY_KEY } from './codes-c924c3db.mjs';\n\nconst TRPC_ERROR_CODES_BY_NUMBER = invert(TRPC_ERROR_CODES_BY_KEY);\nconst JSONRPC2_TO_HTTP_CODE = {\n    PARSE_ERROR: 400,\n    BAD_REQUEST: 400,\n    UNAUTHORIZED: 401,\n    NOT_FOUND: 404,\n    FORBIDDEN: 403,\n    METHOD_NOT_SUPPORTED: 405,\n    TIMEOUT: 408,\n    CONFLICT: 409,\n    PRECONDITION_FAILED: 412,\n    PAYLOAD_TOO_LARGE: 413,\n    UNPROCESSABLE_CONTENT: 422,\n    TOO_MANY_REQUESTS: 429,\n    CLIENT_CLOSED_REQUEST: 499,\n    INTERNAL_SERVER_ERROR: 500,\n    NOT_IMPLEMENTED: 501\n};\nfunction getStatusCodeFromKey(code) {\n    return JSONRPC2_TO_HTTP_CODE[code] ?? 500;\n}\nfunction getHTTPStatusCode(json) {\n    const arr = Array.isArray(json) ? json : [\n        json\n    ];\n    const httpStatuses = new Set(arr.map((res)=>{\n        if ('error' in res) {\n            const data = res.error.data;\n            if (typeof data.httpStatus === 'number') {\n                return data.httpStatus;\n            }\n            const code = TRPC_ERROR_CODES_BY_NUMBER[res.error.code];\n            return getStatusCodeFromKey(code);\n        }\n        return 200;\n    }));\n    if (httpStatuses.size !== 1) {\n        return 207;\n    }\n    const httpStatus = httpStatuses.values().next().value;\n    return httpStatus;\n}\nfunction getHTTPStatusCodeFromError(error) {\n    return getStatusCodeFromKey(error.code);\n}\n\nconst noop = ()=>{\n// noop\n};\nfunction createInnerProxy(callback, path) {\n    const proxy = new Proxy(noop, {\n        get (_obj, key) {\n            if (typeof key !== 'string' || key === 'then') {\n                // special case for if the proxy is accidentally treated\n                // like a PromiseLike (like in `Promise.resolve(proxy)`)\n                return undefined;\n            }\n            return createInnerProxy(callback, [\n                ...path,\n                key\n            ]);\n        },\n        apply (_1, _2, args) {\n            const isApply = path[path.length - 1] === 'apply';\n            return callback({\n                args: isApply ? args.length >= 2 ? args[1] : [] : args,\n                path: isApply ? path.slice(0, -1) : path\n            });\n        }\n    });\n    return proxy;\n}\n/**\n * Creates a proxy that calls the callback with the path and arguments\n *\n * @internal\n */ const createRecursiveProxy = (callback)=>createInnerProxy(callback, []);\n/**\n * Used in place of `new Proxy` where each handler will map 1 level deep to another value.\n *\n * @internal\n */ const createFlatProxy = (callback)=>{\n    return new Proxy(noop, {\n        get (_obj, name) {\n            if (typeof name !== 'string' || name === 'then') {\n                // special case for if the proxy is accidentally treated\n                // like a PromiseLike (like in `Promise.resolve(proxy)`)\n                return undefined;\n            }\n            return callback(name);\n        }\n    });\n};\n\nexport { TRPC_ERROR_CODES_BY_NUMBER as T, createRecursiveProxy as a, getHTTPStatusCode as b, createFlatProxy as c, getHTTPStatusCodeFromError as g };\n","/**\n * We treat `undefined` as an input the same as omitting an `input`\n * https://github.com/trpc/trpc/issues/2290\n */\nexport function getQueryKey(\n  path: string,\n  input: unknown,\n): [string] | [string, unknown] {\n  return input === undefined ? [path] : [path, input];\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { type AnyRouter } from \"@trpc/server\";\nimport { createRecursiveProxy } from \"@trpc/server/shared\";\nimport { getQueryKey } from \"../../internals/getQueryKey\";\nimport { type CreateSolidQueryHooks } from \"../hooks/createHooksInternal\";\n\n/**\n * Create proxy for decorating procedures\n * @internal\n */\nexport function createSolidProxyDecoration<TRouter extends AnyRouter>(\n  name: string,\n  hooks: CreateSolidQueryHooks<TRouter>\n) {\n  return createRecursiveProxy((opts) => {\n    const args = opts.args;\n\n    const pathCopy = [name, ...opts.path];\n\n    // The last arg is for instance `.useMutation` or `.useQuery()`\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const lastArg = pathCopy.pop()!;\n\n    // The `path` ends up being something like `post.byId`\n    const path = pathCopy.join(\".\");\n    if (lastArg === \"useMutation\") {\n      return (hooks as any)[lastArg](path, ...args);\n    }\n    return (hooks as any)[lastArg](\n      () =>\n        getQueryKey(path, typeof args[0] === \"function\" ? args[0]() : args[0]),\n      args[1]\n    );\n  });\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type {\n  CancelOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  QueryClient,\n  RefetchOptions,\n  RefetchQueryFilters,\n  SetDataOptions,\n  Updater,\n} from '@tanstack/solid-query'\nimport type { TRPCClientError, TRPCRequestOptions } from '@trpc/client'\nimport type {\n  AnyRouter,\n  inferHandlerInput,\n  inferProcedureInput,\n  inferProcedureOutput,\n} from '@trpc/server'\nimport { createContext } from 'solid-js'\n\nexport interface TRPCFetchQueryOptions<TInput, TError, TOutput>\n  extends FetchQueryOptions<TInput, TError, TOutput>,\n    TRPCRequestOptions {}\n\nexport type TRPCFetchInfiniteQueryOptions<TInput, TError, TOutput> =\n  FetchInfiniteQueryOptions<TInput, TError, TOutput> & TRPCRequestOptions\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport interface ProxyTRPCContextProps<_TRouter extends AnyRouter> {\n  /**\n   * Abort loading query calls when unmounting a component - usually when navigating to a new page\n   * @default false\n   */\n  abortOnUnmount?: boolean\n}\n\nexport interface TRPCContextProps<TRouter extends AnyRouter>\n  extends ProxyTRPCContextProps<TRouter> {\n  /**\n   * The react-query `QueryClient`\n   */\n  queryClient: QueryClient\n}\n\nexport const contextProps: (keyof ProxyTRPCContextProps<any>)[] = [\n  'abortOnUnmount',\n]\n\n/** @internal */\nexport interface TRPCContextState<TRouter extends AnyRouter>\n  extends Required<TRPCContextProps<TRouter>> {\n  /**\n   * @link https://tanstack.com/query/v4/docs/reference/QueryClient#queryclientfetchquery\n   */\n  fetchQuery<\n    TPath extends keyof TRouter['_def']['queries'] & string,\n    TProcedure extends TRouter['_def']['queries'][TPath],\n    TOutput extends inferProcedureOutput<TProcedure>,\n    TInput extends inferProcedureInput<TProcedure>\n  >(\n    pathAndInput: [path: TPath, ...args: inferHandlerInput<TProcedure>],\n    opts?: TRPCFetchQueryOptions<TInput, TRPCClientError<TRouter>, TOutput>\n  ): Promise<TOutput>\n  /**\n   * @link https://tanstack.com/query/v4/docs/reference/QueryClient#queryclientfetchinfinitequery\n   */\n  fetchInfiniteQuery<\n    TPath extends keyof TRouter['_def']['queries'] & string,\n    TProcedure extends TRouter['_def']['queries'][TPath],\n    TOutput extends inferProcedureOutput<TProcedure>,\n    TInput extends inferProcedureInput<TProcedure>\n  >(\n    pathAndInput: [path: TPath, ...args: inferHandlerInput<TProcedure>],\n    opts?: TRPCFetchInfiniteQueryOptions<\n      TInput,\n      TRPCClientError<TRouter>,\n      TOutput\n    >\n  ): Promise<InfiniteData<TOutput>>\n  /**\n   * @link https://react-query.tanstack.com/guides/prefetching\n   */\n  prefetchQuery<\n    TPath extends keyof TRouter['_def']['queries'] & string,\n    TProcedure extends TRouter['_def']['queries'][TPath],\n    TOutput extends inferProcedureOutput<TProcedure>,\n    TInput extends inferProcedureInput<TProcedure>\n  >(\n    pathAndInput: [path: TPath, ...args: inferHandlerInput<TProcedure>],\n    opts?: TRPCFetchQueryOptions<TInput, TRPCClientError<TRouter>, TOutput>\n  ): Promise<void>\n\n  /**\n   * @link https://tanstack.com/query/v4/docs/reference/QueryClient#queryclientprefetchinfinitequery\n   */\n  prefetchInfiniteQuery<\n    TPath extends keyof TRouter['_def']['queries'] & string,\n    TProcedure extends TRouter['_def']['queries'][TPath],\n    TOutput extends inferProcedureOutput<TProcedure>,\n    TInput extends inferProcedureInput<TProcedure>\n  >(\n    pathAndInput: [path: TPath, ...args: inferHandlerInput<TProcedure>],\n    opts?: TRPCFetchInfiniteQueryOptions<\n      TInput,\n      TRPCClientError<TRouter>,\n      TOutput\n    >\n  ): Promise<void>\n\n  /**\n   * @link https://tanstack.com/query/latest/docs/reference/QueryClient#queryclientensurequerydata\n   */\n  ensureQueryData<\n    TPath extends keyof TRouter['_def']['queries'] & string,\n    TProcedure extends TRouter['_def']['queries'][TPath],\n    TOutput extends inferProcedureOutput<TProcedure>,\n    TInput extends inferProcedureInput<TProcedure>\n  >(\n    pathAndInput: [path: TPath, ...args: inferHandlerInput<TProcedure>],\n    opts?: TRPCFetchQueryOptions<TInput, TRPCClientError<TRouter>, TOutput>\n  ): Promise<TOutput>\n\n  /**\n   * @link https://react-query.tanstack.com/guides/query-invalidation\n   */\n  invalidateQueries<\n    TPath extends keyof TRouter['_def']['queries'] & string,\n    TInput extends inferProcedureInput<TRouter['_def']['queries'][TPath]>\n  >(\n    pathAndInput?: [TPath, TInput?] | TPath,\n    filters?: InvalidateQueryFilters,\n    options?: InvalidateOptions\n  ): Promise<void>\n  /**\n   * @link https://react-query.tanstack.com/guides/query-invalidation\n   */\n  invalidateQueries(\n    filters?: InvalidateQueryFilters,\n    options?: InvalidateOptions\n  ): Promise<void>\n\n  /**\n   * @link https://react-query.tanstack.com/reference/QueryClient#queryclientrefetchqueries\n   */\n  refetchQueries<\n    TPath extends keyof TRouter['_def']['queries'] & string,\n    TInput extends inferProcedureInput<TRouter['_def']['queries'][TPath]>\n  >(\n    pathAndInput: [TPath, TInput?],\n    filters?: RefetchQueryFilters,\n    options?: RefetchOptions\n  ): Promise<void>\n  /**\n   * @link https://react-query.tanstack.com/reference/QueryClient#queryclientrefetchqueries\n   */\n  refetchQueries(\n    filters?: RefetchQueryFilters,\n    options?: RefetchOptions\n  ): Promise<void>\n\n  /**\n   * @link https://react-query.tanstack.com/guides/query-cancellation\n   */\n  cancelQuery<\n    TPath extends keyof TRouter['_def']['queries'] & string,\n    TInput extends inferProcedureInput<TRouter['_def']['queries'][TPath]>\n  >(\n    pathAndInput: [TPath, TInput?],\n    options?: CancelOptions\n  ): Promise<void>\n  /**\n   * @link https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydata\n   */\n  setQueryData<\n    TPath extends keyof TRouter['_def']['queries'] & string,\n    TInput extends inferProcedureInput<TRouter['_def']['queries'][TPath]>,\n    TOutput extends inferProcedureOutput<TRouter['_def']['queries'][TPath]>\n  >(\n    pathAndInput: [TPath, TInput?],\n    updater: Updater<TOutput | undefined, TOutput | undefined>,\n    options?: SetDataOptions\n  ): void\n  /**\n   * @link https://react-query.tanstack.com/reference/QueryClient#queryclientgetquerydata\n   */\n  getQueryData<\n    TPath extends keyof TRouter['_def']['queries'] & string,\n    TInput extends inferProcedureInput<TRouter['_def']['queries'][TPath]>,\n    TOutput extends inferProcedureOutput<TRouter['_def']['queries'][TPath]>\n  >(\n    pathAndInput: [TPath, TInput?]\n  ): TOutput | undefined\n  /**\n   * @link https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydata\n   */\n  setInfiniteQueryData<\n    TPath extends keyof TRouter['_def']['queries'] & string,\n    TInput extends inferProcedureInput<TRouter['_def']['queries'][TPath]>,\n    TOutput extends inferProcedureOutput<TRouter['_def']['queries'][TPath]>\n  >(\n    pathAndInput: [TPath, TInput?],\n    updater: Updater<\n      InfiniteData<TOutput> | undefined,\n      InfiniteData<TOutput> | undefined\n    >,\n    options?: SetDataOptions\n  ): void\n  /**\n   * @link https://react-query.tanstack.com/reference/QueryClient#queryclientgetquerydata\n   */\n  getInfiniteQueryData<\n    TPath extends keyof TRouter['_def']['queries'] & string,\n    TInput extends inferProcedureInput<TRouter['_def']['queries'][TPath]>,\n    TOutput extends inferProcedureOutput<TRouter['_def']['queries'][TPath]>\n  >(\n    pathAndInput: [TPath, TInput?]\n  ): InfiniteData<TOutput> | undefined\n}\n\nexport const TRPCContext = createContext(null as any)\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type {\n  CancelOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  RefetchOptions,\n  RefetchQueryFilters,\n  SetDataOptions,\n  Updater,\n} from '@tanstack/solid-query'\nimport { type TRPCClientError } from '@trpc/client'\nimport type {\n  AnyQueryProcedure,\n  AnyRouter,\n  Filter,\n  ProcedureOptions,\n  inferProcedureInput,\n  inferProcedureOutput,\n} from '@trpc/server'\nimport { createFlatProxy, createRecursiveProxy } from '@trpc/server/shared'\nimport {\n  type ProxyTRPCContextProps,\n  type TRPCContextState,\n  type TRPCFetchInfiniteQueryOptions,\n  type TRPCFetchQueryOptions,\n  contextProps,\n} from '../../internals/context'\nimport { getQueryKey } from '../../internals/getQueryKey'\n\ntype DecorateProcedure<\n  TRouter extends AnyRouter,\n  TProcedure extends AnyQueryProcedure\n> = {\n  /**\n   * @link https://react-query.tanstack.com/guides/prefetching\n   */\n  fetch(\n    input: inferProcedureInput<TProcedure>,\n    opts?: TRPCFetchQueryOptions<\n      inferProcedureInput<TProcedure>,\n      TRPCClientError<TRouter>,\n      inferProcedureOutput<TProcedure>\n    >\n  ): Promise<inferProcedureOutput<TProcedure>>\n\n  /**\n   * @link https://react-query.tanstack.com/guides/prefetching\n   */\n  fetchInfinite(\n    input: inferProcedureInput<TProcedure>,\n    opts?: TRPCFetchInfiniteQueryOptions<\n      inferProcedureInput<TProcedure>,\n      TRPCClientError<TRouter>,\n      inferProcedureOutput<TProcedure>\n    >\n  ): Promise<InfiniteData<inferProcedureOutput<TProcedure>>>\n\n  /**\n   * @link https://react-query.tanstack.com/guides/prefetching\n   */\n  prefetch(\n    input: inferProcedureInput<TProcedure>,\n    opts?: TRPCFetchQueryOptions<\n      inferProcedureInput<TProcedure>,\n      TRPCClientError<TRouter>,\n      inferProcedureOutput<TProcedure>\n    >\n  ): Promise<void>\n\n  /**\n   * @link https://react-query.tanstack.com/guides/prefetching\n   */\n  prefetchInfinite(\n    input: inferProcedureInput<TProcedure>,\n    procedureOpts?: ProcedureOptions,\n    opts?: TRPCFetchInfiniteQueryOptions<\n      inferProcedureInput<TProcedure>,\n      TRPCClientError<TRouter>,\n      inferProcedureOutput<TProcedure>\n    >\n  ): Promise<void>\n\n  /**\n   * @link https://react-query.tanstack.com/guides/query-invalidation\n   */\n  invalidate(\n    input?: inferProcedureInput<TProcedure>,\n    filters?: InvalidateQueryFilters,\n    options?: InvalidateOptions\n  ): Promise<void>\n\n  /**\n   * @link https://react-query.tanstack.com/reference/QueryClient#queryclientrefetchqueries\n   */\n  refetch(\n    input?: inferProcedureInput<TProcedure>,\n    filters?: RefetchQueryFilters,\n    options?: RefetchOptions\n  ): Promise<void>\n\n  /**\n   * @link https://react-query.tanstack.com/guides/query-cancellation\n   */\n  cancel(\n    input?: inferProcedureInput<TProcedure>,\n    options?: CancelOptions\n  ): Promise<void>\n\n  /**\n   * @link https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydata\n   */\n  setData(\n    updater: Updater<\n      inferProcedureOutput<TProcedure> | undefined,\n      inferProcedureOutput<TProcedure> | undefined\n    >,\n    input?: inferProcedureInput<TProcedure>,\n    options?: SetDataOptions\n  ): void\n\n  /**\n   * @link https://react-query.tanstack.com/reference/QueryClient#queryclientgetquerydata\n   */\n  setInfiniteData(\n    updater: Updater<\n      InfiniteData<inferProcedureOutput<TProcedure>> | undefined,\n      InfiniteData<inferProcedureOutput<TProcedure>> | undefined\n    >,\n    input?: inferProcedureInput<TProcedure>,\n    options?: SetDataOptions\n  ): void\n\n  /**\n   * @link https://react-query.tanstack.com/reference/QueryClient#queryclientgetquerydata\n   */\n  getData(\n    input?: inferProcedureInput<TProcedure>\n  ): inferProcedureOutput<TProcedure> | undefined\n\n  /**\n   * @link https://react-query.tanstack.com/reference/QueryClient#queryclientgetquerydata\n   */\n  getInfiniteData(\n    input?: inferProcedureInput<TProcedure>\n  ): InfiniteData<inferProcedureOutput<TProcedure>> | undefined\n\n  /**\n   * @link https://react-query.tanstack.com/guides/prefetching\n   */\n  ensureData(\n    input: inferProcedureInput<TProcedure>,\n    opts?: TRPCFetchQueryOptions<\n      inferProcedureInput<TProcedure>,\n      TRPCClientError<TRouter>,\n      inferProcedureOutput<TProcedure>\n    >\n  ): Promise<inferProcedureOutput<TProcedure>>\n}\n\n/**\n * A type that will traverse all procedures and sub routers of a given router to create a union of\n * their possible input types\n */\ntype InferAllRouterQueryInputTypes<TRouter extends AnyRouter> = {\n  [TKey in keyof Filter<\n    TRouter['_def']['record'],\n    AnyRouter | AnyQueryProcedure\n  >]: TRouter['_def']['record'][TKey] extends AnyQueryProcedure\n    ? inferProcedureInput<TRouter['_def']['record'][TKey]>\n    : InferAllRouterQueryInputTypes<TRouter['_def']['record'][TKey]> // Recurse as we have a sub router!\n}[keyof Filter<TRouter['_def']['record'], AnyRouter | AnyQueryProcedure>] // This flattens results into a big union\n\n/**\n * this is the type that is used to add in procedures that can be used on\n * an entire router\n */\ntype DecorateRouterProcedure<TRouter extends AnyRouter> = {\n  /**\n   * @link https://react-query.tanstack.com/guides/query-invalidation\n   */\n  invalidate(\n    input?: Partial<InferAllRouterQueryInputTypes<TRouter>>,\n    filters?: InvalidateQueryFilters,\n    options?: InvalidateOptions\n  ): Promise<void>\n}\n\n/**\n * @internal\n */\nexport type DecoratedProcedureUtilsRecord<TRouter extends AnyRouter> = {\n  [TKey in keyof Filter<\n    TRouter['_def']['record'],\n    AnyRouter | AnyQueryProcedure\n  >]: TRouter['_def']['record'][TKey] extends AnyRouter\n    ? DecoratedProcedureUtilsRecord<TRouter['_def']['record'][TKey]> &\n        DecorateRouterProcedure<TRouter['_def']['record'][TKey]>\n    : // utils only apply to queries\n      DecorateProcedure<TRouter, TRouter['_def']['record'][TKey]>\n} & DecorateRouterProcedure<TRouter> // Add functions that should be available at utils root\n\ntype AnyDecoratedProcedure = DecorateProcedure<any, any>\n\nexport type CreateSolidUtilsProxy<TRouter extends AnyRouter> =\n  DecoratedProcedureUtilsRecord<TRouter> & ProxyTRPCContextProps<TRouter>\n\n/**\n * @internal\n */\nexport function createSolidQueryUtilsProxy<TRouter extends AnyRouter>(\n  context: TRPCContextState<AnyRouter>\n) {\n  type CreateSolidUtilsProxyReturnType = CreateSolidUtilsProxy<TRouter>\n\n  return createFlatProxy<CreateSolidUtilsProxyReturnType>((key) => {\n    const contextName = key as typeof contextProps[number]\n    if (contextProps.includes(contextName)) {\n      return context[contextName]\n    }\n\n    return createRecursiveProxy(({ path, args }) => {\n      const pathCopy = [key, ...path]\n      const utilName = pathCopy.pop() as keyof AnyDecoratedProcedure\n\n      const fullPath = pathCopy.join('.')\n\n      const getOpts = (name: typeof utilName) => {\n        if (['setData', 'setInfiniteData'].includes(name)) {\n          const [updater, input, ...rest] = args as Parameters<\n            AnyDecoratedProcedure[typeof utilName]\n          >\n          const queryKey = getQueryKey(fullPath, input)\n          return {\n            queryKey,\n            updater,\n            rest,\n          }\n        }\n\n        const [input, ...rest] = args as Parameters<\n          AnyDecoratedProcedure[typeof utilName]\n        >\n        const queryKey = getQueryKey(fullPath, input)\n        return {\n          queryKey,\n          rest,\n        }\n      }\n\n      const { queryKey, rest, updater } = getOpts(utilName)\n\n      const contextMap: Record<keyof AnyDecoratedProcedure, () => unknown> = {\n        fetch: () => context.fetchQuery(queryKey, ...rest),\n        fetchInfinite: () => context.fetchInfiniteQuery(queryKey, ...rest),\n        prefetch: () => context.prefetchQuery(queryKey, ...rest),\n        prefetchInfinite: () =>\n          context.prefetchInfiniteQuery(queryKey, ...rest),\n        ensureData: () => context.ensureQueryData(queryKey, ...rest),\n        invalidate: () => context.invalidateQueries(queryKey, ...rest),\n        refetch: () => context.refetchQueries(queryKey, ...rest),\n        cancel: () => context.cancelQuery(queryKey, ...rest),\n        setData: () => context.setQueryData(queryKey, updater, ...rest),\n        setInfiniteData: () =>\n          context.setInfiniteQueryData(queryKey, updater, ...rest),\n        getData: () => context.getQueryData(queryKey),\n        getInfiniteData: () => context.getInfiniteQueryData(queryKey),\n      }\n\n      return contextMap[utilName]()\n    })\n  })\n}\n","/**\n * To allow easy interactions with groups of related queries, such as\n * invalidating all queries of a router, we use an array as the path when\n * storing in tanstack query. This function converts from the `.` separated\n * path passed around internally by both the legacy and proxy implementation.\n * https://github.com/trpc/trpc/issues/2611\n */\nexport function getArrayQueryKey(\n  queryKey: string | [string] | [string, ...unknown[]] | unknown[],\n): [string[]] | [string[], ...unknown[]] | [] {\n  const queryKeyArrayed = Array.isArray(queryKey) ? queryKey : [queryKey];\n  const [path, ...input] = queryKeyArrayed;\n\n  const arrayPath =\n    typeof path !== 'string' || path === '' ? [] : path.split('.');\n\n  return [arrayPath, ...input];\n}\n","/* eslint-disable solid/reactivity */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n  type DehydratedState,\n  type CreateInfiniteQueryResult,\n  type CreateMutationOptions,\n  type CreateMutationResult,\n  type CreateQueryResult,\n  createInfiniteQuery as __useInfiniteQuery,\n  createMutation as __useMutation,\n  createQuery as __useQuery,\n  type QueryClientProviderProps,\n  type QueryClient,\n  InfiniteData,\n} from '@tanstack/solid-query'\nimport {\n  type CreateTRPCClientOptions,\n  type TRPCClient,\n  type TRPCClientErrorLike,\n  createTRPCClient,\n} from '@trpc/client'\nimport type {\n  AnyRouter,\n  ProcedureRecord,\n  inferHandlerInput,\n  inferProcedureClientError,\n  inferProcedureInput,\n  inferProcedureOutput,\n  inferSubscriptionOutput,\n} from '@trpc/server'\nimport { type inferObservableValue } from '@trpc/server/observable'\nimport {\n  type Accessor,\n  type Context,\n  createEffect,\n  type JSX,\n  mergeProps,\n  onCleanup,\n  useContext as __useContext,\n  on,\n  createMemo,\n} from 'solid-js'\nimport { isServer } from 'solid-js/web'\nimport {\n  TRPCContext,\n  type TRPCContextProps,\n  type TRPCContextState,\n} from '../../internals/context'\nimport { getArrayQueryKey } from '../../internals/getArrayQueryKey'\nimport { type CreateTRPCSolidOptions } from '../types'\nimport {\n  type UseTRPCQueryOptions,\n  type UseTRPCInfiniteQueryOptions,\n  type TRPCUseQueryBaseOptions,\n} from './types'\nimport { getRequestEvent } from 'solid-js/web'\nexport type OutputWithCursor<TData, TCursor = any> = {\n  cursor: TCursor | null\n  data: TData\n}\n\nexport type { TRPCContext, TRPCContextState } from '../../internals/context'\n\nexport interface UseTRPCMutationOptions<\n  TInput,\n  TError,\n  TOutput,\n  TContext = unknown\n> extends CreateMutationOptions<TOutput, TError, TInput, TContext>,\n    TRPCUseQueryBaseOptions {}\n\nexport interface UseTRPCSubscriptionOptions<TOutput, TError> {\n  enabled?: boolean\n  onStarted?: () => void\n  onData: (data: TOutput) => void\n  onError?: (err: TError) => void\n}\n\nfunction getClientArgs<TPathAndInput extends unknown[], TOptions>(\n  pathAndInput: TPathAndInput,\n  opts: TOptions\n) {\n  const [path, input] = pathAndInput\n  return [path, input, (opts as any)?.trpc] as const\n}\n\ntype inferInfiniteQueryNames<TObj extends ProcedureRecord> = {\n  [TPath in keyof TObj]: inferProcedureInput<TObj[TPath]> extends {\n    cursor?: any\n  }\n    ? TPath\n    : never\n}[keyof TObj]\n\ntype inferProcedures<TObj extends ProcedureRecord> = {\n  [TPath in keyof TObj]: {\n    input: inferProcedureInput<TObj[TPath]>\n    output: inferProcedureOutput<TObj[TPath]>\n  }\n}\n\nexport interface TRPCProviderProps<TRouter extends AnyRouter>\n  extends TRPCContextProps<TRouter> {\n  children: JSX.Element\n}\n\nexport type TRPCProvider<TRouter extends AnyRouter> = (\n  props: Omit<TRPCProviderProps<TRouter>, 'client'> & {\n    queryClientOpts?: Omit<QueryClientProviderProps, 'client'>\n  }\n) => JSX.Element\n\nexport type UseDehydratedState<TRouter extends AnyRouter> = (\n  client: TRPCClient<TRouter>,\n  trpcState: DehydratedState | undefined\n) => Accessor<DehydratedState | undefined>\n\nexport type CreateClient<TRouter extends AnyRouter> = (\n  opts: (\n    event?: ReturnType<typeof getRequestEvent>\n  ) => CreateTRPCClientOptions<TRouter>\n) => TRPCClient<TRouter>\n\ninterface TRPCHookResult {\n  trpc: {\n    path: string\n  }\n}\n\n/**\n * @internal\n */\nexport type UseTRPCQueryResult<TData, TError> = CreateQueryResult<\n  TData,\n  TError\n> &\n  TRPCHookResult\n\n/**\n * @internal\n */\nexport type UseTRPCInfiniteQueryResult<TData, TError> =\n  CreateInfiniteQueryResult<InfiniteData<TData>, TError> & TRPCHookResult\n\n/**\n * @internal\n */\nexport type UseTRPCMutationResult<TData, TError, TVariables, TContext> =\n  CreateMutationResult<TData, TError, TVariables, TContext> & TRPCHookResult\n\n/**\n * Create strongly typed react hooks\n * @internal\n */\nexport function createHooksInternal<TRouter extends AnyRouter>(\n  config?: CreateTRPCSolidOptions<TRouter>\n) {\n  // const mutationSuccessOverride: UseMutationOverride[\"onSuccess\"] =\n  //   config?.unstable_overrides?.useMutation?.onSuccess ??\n  //   ((options) => options.originalFn());\n\n  type TQueries = TRouter['_def']['queries']\n  type TSubscriptions = TRouter['_def']['subscriptions']\n  type TMutations = TRouter['_def']['mutations']\n\n  type TError = TRPCClientErrorLike<TRouter>\n  type TInfiniteQueryNames = inferInfiniteQueryNames<TQueries>\n\n  type TQueryValues = inferProcedures<TQueries>\n  type TMutationValues = inferProcedures<TMutations>\n\n  const Context = (config?.context ?? TRPCContext) as Context<\n    TRPCContextState<TRouter> & { client: Accessor<any> }\n  >\n  const SolidQueryContext = config?.solidQueryContext as Context<\n    QueryClient | undefined\n  >\n\n  function wrapFn<Fn extends (...args: any[]) => any>(fn: Fn) {\n    return async (...args: Parameters<Fn>) => {\n      const results = await fn(...args)\n      // console.log({ results })\n      return results\n    }\n  }\n\n  const TRPCProvider: TRPCProvider<TRouter> = (props) => {\n    const { abortOnUnmount = false, queryClient } = props\n    const event = isServer ? getRequestEvent() : undefined\n    const client = createMemo(() =>\n      createTRPCClient(config?.config(event) as any)\n    ) as any\n    return (\n      <Context.Provider\n        value={{\n          abortOnUnmount,\n          queryClient,\n          client,\n          fetchQuery: (pathAndInput, opts) => {\n            return queryClient.fetchQuery({\n              queryKey: getArrayQueryKey(pathAndInput),\n              queryFn: wrapFn(() =>\n                client().query(...getClientArgs(pathAndInput, opts))\n              ),\n              ...opts,\n            })\n          },\n          fetchInfiniteQuery: (pathAndInput, opts) => {\n            return queryClient.fetchInfiniteQuery({\n              queryKey: getArrayQueryKey(pathAndInput),\n              queryFn: ({ pageParam }) => {\n                const [path, input] = pathAndInput\n                const actualInput = { ...(input as any), cursor: pageParam }\n                return client().query(\n                  ...getClientArgs([path, actualInput], opts)\n                )\n              },\n              initialPageParam: undefined,\n              ...opts,\n            })\n          },\n\n          prefetchQuery: (pathAndInput, opts) => {\n            return queryClient.prefetchQuery({\n              queryKey: getArrayQueryKey(pathAndInput),\n              queryFn: () =>\n                client().query(...getClientArgs(pathAndInput, opts)),\n            })\n          },\n          prefetchInfiniteQuery: (pathAndInput, opts) => {\n            return queryClient.prefetchInfiniteQuery({\n              queryKey: getArrayQueryKey(pathAndInput),\n              initialPageParam: undefined,\n              queryFn: ({ pageParam }) => {\n                const [path, input] = pathAndInput\n                const actualInput = { ...(input as any), cursor: pageParam }\n                return client().query(\n                  ...getClientArgs([path, actualInput], opts)\n                )\n              },\n            })\n          },\n          ensureQueryData: (pathAndInput, opts) => {\n            return queryClient.ensureQueryData({\n              queryKey: getArrayQueryKey(pathAndInput),\n              queryFn: () =>\n                client().query(...getClientArgs(pathAndInput, opts)),\n            })\n          },\n          invalidateQueries: (...args: any[]) => {\n            const [queryKey, ...rest] = args\n            return queryClient.invalidateQueries({\n              queryKey: getArrayQueryKey(queryKey),\n              ...rest,\n            })\n          },\n          refetchQueries: (...args: any[]) => {\n            const [queryKey, ...rest] = args\n            return queryClient.refetchQueries({\n              queryKey: getArrayQueryKey(queryKey),\n              ...rest,\n            })\n          },\n          cancelQuery: (pathAndInput) => {\n            return queryClient.cancelQueries({\n              queryKey: getArrayQueryKey(pathAndInput),\n            })\n          },\n          setQueryData: (...args) => {\n            const [queryKey, ...rest] = args\n            return queryClient.setQueryData(\n              getArrayQueryKey(queryKey),\n              (input) => {\n                if (typeof rest[0] === 'function') {\n                  return (rest[0] as any)(input)\n                }\n                return rest[0]\n              }\n            )\n          },\n          getQueryData: (...args) => {\n            const [queryKey, ...rest] = args\n\n            return queryClient.getQueryData(getArrayQueryKey(queryKey), ...rest)\n          },\n          setInfiniteQueryData: (...args) => {\n            const [queryKey, ...rest] = args\n\n            return queryClient.setQueryData(\n              getArrayQueryKey(queryKey),\n              rest as any\n            )\n          },\n          getInfiniteQueryData: (...args) => {\n            const [queryKey, ...rest] = args\n\n            return queryClient.getQueryData(getArrayQueryKey(queryKey), ...rest)\n          },\n        }}\n      >\n        {props.children}\n      </Context.Provider>\n    )\n  }\n\n  function useContext() {\n    return __useContext(Context)\n  }\n\n  function useQuery<\n    TPath extends keyof TQueryValues & string,\n    TQueryFnData = TQueryValues[TPath]['output'],\n    TData = TQueryValues[TPath]['output']\n  >(\n    pathAndInput: () => [\n      path: TPath,\n      ...args: inferHandlerInput<TQueries[TPath]>\n    ],\n    opts?: UseTRPCQueryOptions<\n      TPath,\n      TQueryValues[TPath]['input'],\n      TQueryFnData,\n      TData,\n      TError\n    >\n  ): UseTRPCQueryResult<TData, TError> {\n    const withCtxOpts = () =>\n      mergeProps(opts?.() ?? {}, {\n        context: SolidQueryContext,\n      })\n    const ctx = useContext()\n    return __useQuery(() => ({\n      queryKey: getArrayQueryKey(pathAndInput()),\n      queryFn: wrapFn(() => {\n        return ctx.client().query(...getClientArgs(pathAndInput(), opts?.()))\n      }),\n      ...(withCtxOpts() as any),\n    })) as UseTRPCQueryResult<TData, TError>\n  }\n\n  function useMutation<\n    TPath extends keyof TMutationValues & string,\n    TContext = unknown\n  >(\n    path: TPath | [TPath],\n    opts?: () => UseTRPCMutationOptions<\n      TMutationValues[TPath]['input'],\n      TError,\n      TMutationValues[TPath]['output'],\n      TContext\n    >\n  ): UseTRPCMutationResult<\n    TMutationValues[TPath]['output'],\n    TError,\n    TMutationValues[TPath]['input'],\n    TContext\n  > {\n    const withCtxOpts = () =>\n      mergeProps(opts?.(), {\n        context: SolidQueryContext,\n      })\n    const ctx = useContext()\n    return __useMutation(() => ({\n      mutationFn: (input) => {\n        const actualPath = Array.isArray(path) ? path[0] : path\n\n        return ctx\n          .client()\n          .mutation(...getClientArgs([actualPath, input], opts))\n      },\n      ...withCtxOpts(),\n    })) as UseTRPCMutationResult<\n      TMutationValues[TPath]['output'],\n      TError,\n      TMutationValues[TPath]['input'],\n      TContext\n    >\n  }\n\n  /* istanbul ignore next */\n  /**\n   * ⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️\n   *  **Experimental.** API might change without major version bump\n   * ⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠\n   */\n  function useSubscription<\n    TPath extends keyof TSubscriptions & string,\n    TOutput extends inferSubscriptionOutput<TRouter, TPath>\n  >(\n    pathAndInput: () => [\n      path: TPath,\n      ...args: inferHandlerInput<TSubscriptions[TPath]>\n    ],\n    opts: () => UseTRPCSubscriptionOptions<\n      inferObservableValue<inferProcedureOutput<TSubscriptions[TPath]>>,\n      inferProcedureClientError<TSubscriptions[TPath]>\n    >\n  ) {\n    const ctx = useContext()\n    return createEffect(\n      on(\n        () => [pathAndInput(), opts?.()],\n        () => {\n          if (!(opts().enabled ?? true)) {\n            return\n          }\n          let isStopped = false\n\n          const subscription = (\n            ctx.client() as TRPCClient<AnyRouter>\n          ).subscription<\n            TRouter['_def']['subscriptions'],\n            TPath,\n            TOutput,\n            inferProcedureInput<TRouter['_def']['subscriptions'][TPath]>\n          >(pathAndInput()[0], (pathAndInput()[1] ?? undefined) as any, {\n            onStarted: () => {\n              if (!isStopped) {\n                opts?.()?.onStarted?.()\n              }\n            },\n            onData: (data) => {\n              if (!isStopped) {\n                opts?.()?.onData(data)\n              }\n            },\n            onError: (err) => {\n              if (!isStopped) {\n                opts?.()?.onError?.(err)\n              }\n            },\n          })\n          onCleanup(() => {\n            isStopped = true\n            subscription.unsubscribe()\n          })\n        }\n      )\n    )\n  }\n\n  function useInfiniteQuery<TPath extends TInfiniteQueryNames & string>(\n    pathAndInput: () => [\n      path: TPath,\n      input: Omit<TQueryValues[TPath]['input'], 'cursor'>\n    ],\n    opts?: UseTRPCInfiniteQueryOptions<\n      TPath,\n      Omit<TQueryValues[TPath]['input'], 'cursor'>,\n      TQueryValues[TPath]['output'],\n      TError\n    >\n  ): UseTRPCInfiniteQueryResult<TQueryValues[TPath]['output'], TError> {\n    const withCtxOpts = () =>\n      mergeProps(opts?.(), {\n        context: SolidQueryContext,\n      })\n    const ctx = useContext()\n    return __useInfiniteQuery(() => ({\n      queryKey: getArrayQueryKey(pathAndInput()),\n      queryFn: (queryFunctionContext) => {\n        const actualInput = {\n          ...((pathAndInput()[1] as any) ?? {}),\n          cursor: queryFunctionContext.pageParam,\n        }\n\n        return ctx\n          .client()\n          .query(...getClientArgs([pathAndInput()[0], actualInput], opts?.()))\n      },\n      ...(withCtxOpts() as any),\n    })) as UseTRPCInfiniteQueryResult<TQueryValues[TPath]['output'], TError>\n  }\n  return {\n    Provider: TRPCProvider,\n    useContext,\n    useQuery,\n    useMutation,\n    useSubscription,\n    useInfiniteQuery,\n  }\n}\n\n/**\n * Hack to infer the type of `createReactQueryHooks`\n * @link https://stackoverflow.com/a/59072991\n */\nclass GnClass<TRouter extends AnyRouter> {\n  fn() {\n    return createHooksInternal<TRouter>()\n  }\n}\n\ntype returnTypeInferer<TType> = TType extends (\n  a: Record<string, string>\n) => infer U\n  ? U\n  : never\ntype fooType<TRouter extends AnyRouter> = GnClass<TRouter>['fn']\n\n/**\n * Infer the type of a `createSolidQueryHooks` function\n * @internal\n */\nexport type CreateSolidQueryHooks<TRouter extends AnyRouter> =\n  returnTypeInferer<fooType<TRouter>>\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { type TRPCClientErrorLike } from \"@trpc/client\";\nimport type {\n  AnyMutationProcedure,\n  AnyProcedure,\n  AnyQueryProcedure,\n  AnyRouter,\n  AnySubscriptionProcedure,\n  ProcedureRouterRecord,\n  inferProcedureInput,\n  inferProcedureOutput,\n} from \"@trpc/server\";\nimport { type inferObservableValue } from \"@trpc/server/observable\";\nimport { createFlatProxy } from \"@trpc/server/shared\";\nimport {\n  type CreateSolidUtilsProxy,\n  createSolidProxyDecoration,\n  createSolidQueryUtilsProxy,\n} from \"./shared\";\nimport {\n  type CreateClient,\n  type CreateSolidQueryHooks,\n  type TRPCProvider,\n  type UseDehydratedState,\n  type UseTRPCInfiniteQueryResult,\n  type UseTRPCMutationOptions,\n  type UseTRPCMutationResult,\n  type UseTRPCQueryResult,\n  type UseTRPCSubscriptionOptions,\n  createHooksInternal,\n} from \"./shared/hooks/createHooksInternal\";\nimport {\n  type UseTRPCInfiniteQueryOptions,\n  type UseTRPCQueryOptions,\n} from \"./shared/hooks/types\";\nimport { type CreateTRPCSolidOptions } from \"./shared/types\";\n\nexport type FixProcedureInput<T> = T extends void | undefined\n  ? void | undefined\n  : () => T;\n/**\n * @internal\n */\nexport type DecorateProcedure<\n  TProcedure extends AnyProcedure,\n  TPath extends string\n> = TProcedure extends AnyQueryProcedure\n  ? {\n      useQuery: <\n        TQueryFnData = inferProcedureOutput<TProcedure>,\n        TData = inferProcedureOutput<TProcedure>\n      >(\n        input: FixProcedureInput<inferProcedureInput<TProcedure>>,\n        opts?: UseTRPCQueryOptions<\n          TPath,\n          inferProcedureInput<TProcedure>,\n          TQueryFnData,\n          TData,\n          TRPCClientErrorLike<TProcedure>\n        >\n      ) => UseTRPCQueryResult<TData, TRPCClientErrorLike<TProcedure>>;\n    } & (inferProcedureInput<TProcedure> extends { cursor?: any }\n      ? {\n          useInfiniteQuery: <\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            _TQueryFnData = inferProcedureOutput<TProcedure>,\n            TData = inferProcedureOutput<TProcedure>\n          >(\n            input: FixProcedureInput<\n              Omit<inferProcedureInput<TProcedure>, \"cursor\">\n            >,\n            opts?: UseTRPCInfiniteQueryOptions<\n              TPath,\n              inferProcedureInput<TProcedure>,\n              TData,\n              TRPCClientErrorLike<TProcedure>\n            >\n          ) => UseTRPCInfiniteQueryResult<\n            TData,\n            TRPCClientErrorLike<TProcedure>\n          >;\n        }\n      : // eslint-disable-next-line @typescript-eslint/ban-types\n        {})\n  : TProcedure extends AnyMutationProcedure\n  ? {\n      useMutation: <TContext = unknown>(\n        opts?: UseTRPCMutationOptions<\n          inferProcedureInput<TProcedure>,\n          TRPCClientErrorLike<TProcedure>,\n          inferProcedureOutput<TProcedure>,\n          TContext\n        >\n      ) => UseTRPCMutationResult<\n        inferProcedureOutput<TProcedure>,\n        TRPCClientErrorLike<TProcedure>,\n        inferProcedureInput<TProcedure>,\n        TContext\n      >;\n    }\n  : TProcedure extends AnySubscriptionProcedure\n  ? {\n      useSubscription: (\n        input: FixProcedureInput<inferProcedureInput<TProcedure>>,\n        opts?: () => UseTRPCSubscriptionOptions<\n          inferObservableValue<inferProcedureOutput<TProcedure>>,\n          TRPCClientErrorLike<TProcedure>\n        >\n      ) => void;\n    }\n  : never;\n\n/**\n * @internal\n */\nexport type DecoratedProcedureRecord<\n  TProcedures extends ProcedureRouterRecord,\n  TPath extends string = \"\"\n> = {\n  [TKey in keyof TProcedures]: TProcedures[TKey] extends AnyRouter\n    ? DecoratedProcedureRecord<\n        TProcedures[TKey][\"_def\"][\"record\"],\n        `${TPath}${TKey & string}.`\n      >\n    : TProcedures[TKey] extends AnyProcedure\n    ? DecorateProcedure<TProcedures[TKey], `${TPath}${TKey & string}`>\n    : never;\n};\n\nexport type CreateTRPCSolidStart<TRouter extends AnyRouter> = {\n  useContext(): CreateSolidUtilsProxy<TRouter>;\n  Provider: TRPCProvider<TRouter>;\n  createClient: CreateClient<TRouter>;\n  useDehydratedState: UseDehydratedState<TRouter>;\n} & DecoratedProcedureRecord<TRouter[\"_def\"][\"record\"]>;\n\n/**\n * @internal\n */\nexport function createHooksInternalProxy<TRouter extends AnyRouter>(\n  trpc: CreateSolidQueryHooks<TRouter>\n) {\n  type CreateHooksInternalProxy = CreateTRPCSolidStart<TRouter>;\n\n  return createFlatProxy<CreateHooksInternalProxy>((key) => {\n    if (key === \"useContext\") {\n      return () => {\n        const context = trpc.useContext();\n        // create a stable reference of the utils context\n        return (createSolidQueryUtilsProxy as any)(context as any);\n      };\n    }\n\n    if ((key as string) in trpc) {\n      return (trpc as any)[key];\n    }\n\n    return createSolidProxyDecoration(key as string, trpc);\n  });\n}\n\nexport function createTRPCSolidStart<TRouter extends AnyRouter>(\n  opts?: CreateTRPCSolidOptions<TRouter>\n) {\n  const hooks = createHooksInternal<TRouter>(opts);\n  const proxy = createHooksInternalProxy<TRouter>(hooks);\n\n  return proxy;\n}\n","// interop:\nimport { type AnyRouter } from '@trpc/server'\nimport {\n  type CreateTRPCSolidStart,\n  createHooksInternalProxy,\n} from './createTRPCSolid'\nimport { type CreateTRPCSolidOptions } from './shared'\nimport {\n  type CreateSolidQueryHooks,\n  createHooksInternal,\n} from './shared/hooks/createHooksInternal'\n\n/**\n * @deprecated use `createTRPCSolid` instead\n */\nexport function createSolidQueryHooks<TRouter extends AnyRouter>(\n  opts?: CreateTRPCSolidOptions<TRouter>\n): CreateSolidQueryHooks<TRouter> & {\n  proxy: CreateTRPCSolidStart<TRouter>\n} {\n  const trpc = createHooksInternal<TRouter>(opts)\n  const proxy = createHooksInternalProxy<TRouter>(trpc)\n\n  return {\n    ...trpc,\n    proxy,\n  }\n}\n"],"names":["getQueryKey","path","input","undefined","createSolidProxyDecoration","name","hooks","createRecursiveProxy","opts","args","pathCopy","lastArg","pop","join","contextProps","TRPCContext","createContext","createSolidQueryUtilsProxy","context","createFlatProxy","key","contextName","includes","utilName","fullPath","getOpts","updater","rest","queryKey","contextMap","fetch","fetchQuery","fetchInfinite","fetchInfiniteQuery","prefetch","prefetchQuery","prefetchInfinite","prefetchInfiniteQuery","ensureData","ensureQueryData","invalidate","invalidateQueries","refetch","refetchQueries","cancel","cancelQuery","setData","setQueryData","setInfiniteData","setInfiniteQueryData","getData","getQueryData","getInfiniteData","getInfiniteQueryData","getArrayQueryKey","queryKeyArrayed","Array","isArray","arrayPath","split","getClientArgs","pathAndInput","trpc","createHooksInternal","config","Context","SolidQueryContext","solidQueryContext","wrapFn","fn","results","TRPCProvider","props","abortOnUnmount","queryClient","event","isServer","getRequestEvent","client","createMemo","createTRPCClient","_$createComponent","Provider","value","queryFn","query","pageParam","actualInput","cursor","initialPageParam","cancelQueries","children","useContext","__useContext","useQuery","withCtxOpts","mergeProps","ctx","__useQuery","useMutation","__useMutation","mutationFn","actualPath","mutation","useSubscription","createEffect","on","enabled","isStopped","subscription","onStarted","onData","data","onError","err","onCleanup","unsubscribe","useInfiniteQuery","__useInfiniteQuery","queryFunctionContext","createHooksInternalProxy","createTRPCSolidStart","proxy","createSolidQueryHooks"],"mappings":"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","x_google_ignoreList":[0,1]}
\ No newline at end of file
diff --git a/dist/index/internals/context.d.ts b/dist/index/internals/context.d.ts
old mode 100644
new mode 100755
diff --git a/dist/index/internals/context.jsx b/dist/index/internals/context.jsx
old mode 100644
new mode 100755
diff --git a/dist/index/internals/getArrayQueryKey.d.ts b/dist/index/internals/getArrayQueryKey.d.ts
old mode 100644
new mode 100755
diff --git a/dist/index/internals/getArrayQueryKey.js b/dist/index/internals/getArrayQueryKey.js
old mode 100644
new mode 100755
diff --git a/dist/index/internals/getQueryKey.d.ts b/dist/index/internals/getQueryKey.d.ts
old mode 100644
new mode 100755
diff --git a/dist/index/internals/getQueryKey.js b/dist/index/internals/getQueryKey.js
old mode 100644
new mode 100755
diff --git a/dist/index/interop.d.ts b/dist/index/interop.d.ts
old mode 100644
new mode 100755
diff --git a/dist/index/interop.js b/dist/index/interop.js
old mode 100644
new mode 100755
diff --git a/dist/index/shared/hooks/createHooksInternal.d.ts b/dist/index/shared/hooks/createHooksInternal.d.ts
old mode 100644
new mode 100755
index 49d8ba2dc976e6d60bef1527c9d3b838c1aab635..35acdeb6af1335e90fa72b962184bfb4cbc28e4c
--- a/dist/index/shared/hooks/createHooksInternal.d.ts
+++ b/dist/index/shared/hooks/createHooksInternal.d.ts
@@ -62,7 +62,9 @@ export type UseTRPCMutationResult<TData, TError, TVariables, TContext> = CreateM
  */
 export declare function createHooksInternal<TRouter extends AnyRouter>(config?: CreateTRPCSolidOptions<TRouter>): {
     Provider: TRPCProvider<TRouter>;
-    useContext: () => TRPCContextState<TRouter>;
+    useContext: () => TRPCContextState<TRouter> & {
+        client: Accessor<any>;
+    };
     useQuery: <TPath extends keyof TRouter["_def"]["queries"] & string, TQueryFnData = inferProcedures<TRouter["_def"]["queries"]>[TPath]["output"], TData = inferProcedures<TRouter["_def"]["queries"]>[TPath]["output"]>(pathAndInput: () => [path: TPath, ...args: import("@trpc/server").ProcedureArgs<import("@trpc/server").inferProcedureParams<TRouter["_def"]["queries"][TPath]>>], opts?: UseTRPCQueryOptions<TPath, inferProcedures<TRouter["_def"]["queries"]>[TPath]["input"], TQueryFnData, TData, TRPCClientErrorLike<TRouter>>) => UseTRPCQueryResult<TData, TRPCClientErrorLike<TRouter>>;
     useMutation: <TPath_1 extends keyof TRouter["_def"]["mutations"] & string, TContext = unknown>(path: TPath_1 | [TPath_1], opts?: () => UseTRPCMutationOptions<inferProcedures<TRouter["_def"]["mutations"]>[TPath_1]["input"], TRPCClientErrorLike<TRouter>, inferProcedures<TRouter["_def"]["mutations"]>[TPath_1]["output"], TContext>) => UseTRPCMutationResult<inferProcedures<TRouter["_def"]["mutations"]>[TPath_1]["output"], TRPCClientErrorLike<TRouter>, inferProcedures<TRouter["_def"]["mutations"]>[TPath_1]["input"], TContext>;
     useSubscription: <TPath_2 extends keyof TRouter["_def"]["subscriptions"] & string, TOutput extends inferObservableValue<inferProcedureOutput<TRouter["_def"]["subscriptions"][TPath_2]>>>(pathAndInput: () => [path: TPath_2, ...args: import("@trpc/server").ProcedureArgs<import("@trpc/server").inferProcedureParams<TRouter["_def"]["subscriptions"][TPath_2]>>], opts: () => UseTRPCSubscriptionOptions<inferObservableValue<inferProcedureOutput<TRouter["_def"]["subscriptions"][TPath_2]>>, inferProcedureClientError<TRouter["_def"]["subscriptions"][TPath_2]>>) => void;
@@ -75,7 +77,9 @@ export declare function createHooksInternal<TRouter extends AnyRouter>(config?:
 declare class GnClass<TRouter extends AnyRouter> {
     fn(): {
         Provider: TRPCProvider<TRouter>;
-        useContext: () => TRPCContextState<TRouter>;
+        useContext: () => TRPCContextState<TRouter> & {
+            client: Accessor<any>;
+        };
         useQuery: <TPath extends keyof TRouter["_def"]["queries"] & string, TQueryFnData = inferProcedures<TRouter["_def"]["queries"]>[TPath]["output"], TData = inferProcedures<TRouter["_def"]["queries"]>[TPath]["output"]>(pathAndInput: () => [path: TPath, ...args: import("@trpc/server").ProcedureArgs<import("@trpc/server").inferProcedureParams<TRouter["_def"]["queries"][TPath]>>], opts?: UseTRPCQueryOptions<TPath, inferProcedures<TRouter["_def"]["queries"]>[TPath]["input"], TQueryFnData, TData, TRPCClientErrorLike<TRouter>>) => UseTRPCQueryResult<TData, TRPCClientErrorLike<TRouter>>;
         useMutation: <TPath_1 extends keyof TRouter["_def"]["mutations"] & string, TContext = unknown>(path: TPath_1 | [TPath_1], opts?: () => UseTRPCMutationOptions<inferProcedures<TRouter["_def"]["mutations"]>[TPath_1]["input"], TRPCClientErrorLike<TRouter>, inferProcedures<TRouter["_def"]["mutations"]>[TPath_1]["output"], TContext>) => UseTRPCMutationResult<inferProcedures<TRouter["_def"]["mutations"]>[TPath_1]["output"], TRPCClientErrorLike<TRouter>, inferProcedures<TRouter["_def"]["mutations"]>[TPath_1]["input"], TContext>;
         useSubscription: <TPath_2 extends keyof TRouter["_def"]["subscriptions"] & string, TOutput extends inferObservableValue<inferProcedureOutput<TRouter["_def"]["subscriptions"][TPath_2]>>>(pathAndInput: () => [path: TPath_2, ...args: import("@trpc/server").ProcedureArgs<import("@trpc/server").inferProcedureParams<TRouter["_def"]["subscriptions"][TPath_2]>>], opts: () => UseTRPCSubscriptionOptions<inferObservableValue<inferProcedureOutput<TRouter["_def"]["subscriptions"][TPath_2]>>, inferProcedureClientError<TRouter["_def"]["subscriptions"][TPath_2]>>) => void;
diff --git a/dist/index/shared/hooks/createHooksInternal.jsx b/dist/index/shared/hooks/createHooksInternal.jsx
old mode 100644
new mode 100755
index a05ee5b798c1d6239b8e671333a9cb9a9afe314b..13ab337ec6d177c0b61c61bdf4741228f2b2a123
--- a/dist/index/shared/hooks/createHooksInternal.jsx
+++ b/dist/index/shared/hooks/createHooksInternal.jsx
@@ -2,7 +2,7 @@
 /* eslint-disable @typescript-eslint/no-explicit-any */
 import { createInfiniteQuery as __useInfiniteQuery, createMutation as __useMutation, createQuery as __useQuery, } from '@tanstack/solid-query';
 import { createTRPCClient, } from '@trpc/client';
-import { createEffect, mergeProps, onCleanup, useContext as __useContext, on, } from 'solid-js';
+import { createEffect, mergeProps, onCleanup, useContext as __useContext, on, createMemo, } from 'solid-js';
 import { isServer } from 'solid-js/web';
 import { TRPCContext, } from '../../internals/context';
 import { getArrayQueryKey } from '../../internals/getArrayQueryKey';
@@ -31,13 +31,15 @@ export function createHooksInternal(config) {
     const TRPCProvider = (props) => {
         const { abortOnUnmount = false, queryClient } = props;
         const event = isServer ? getRequestEvent() : undefined;
+        const client = createMemo(() => createTRPCClient(config?.config(event)));
         return (<Context.Provider value={{
                 abortOnUnmount,
                 queryClient,
+                client,
                 fetchQuery: (pathAndInput, opts) => {
                     return queryClient.fetchQuery({
                         queryKey: getArrayQueryKey(pathAndInput),
-                        queryFn: wrapFn(() => createTRPCClient(config?.config(event)).query(...getClientArgs(pathAndInput, opts))),
+                        queryFn: wrapFn(() => client().query(...getClientArgs(pathAndInput, opts))),
                         ...opts,
                     });
                 },
@@ -47,7 +49,7 @@ export function createHooksInternal(config) {
                         queryFn: ({ pageParam }) => {
                             const [path, input] = pathAndInput;
                             const actualInput = { ...input, cursor: pageParam };
-                            return createTRPCClient(config?.config(event)).query(...getClientArgs([path, actualInput], opts));
+                            return client().query(...getClientArgs([path, actualInput], opts));
                         },
                         initialPageParam: undefined,
                         ...opts,
@@ -56,7 +58,7 @@ export function createHooksInternal(config) {
                 prefetchQuery: (pathAndInput, opts) => {
                     return queryClient.prefetchQuery({
                         queryKey: getArrayQueryKey(pathAndInput),
-                        queryFn: () => createTRPCClient(config?.config(event)).query(...getClientArgs(pathAndInput, opts)),
+                        queryFn: () => client().query(...getClientArgs(pathAndInput, opts)),
                     });
                 },
                 prefetchInfiniteQuery: (pathAndInput, opts) => {
@@ -66,14 +68,14 @@ export function createHooksInternal(config) {
                         queryFn: ({ pageParam }) => {
                             const [path, input] = pathAndInput;
                             const actualInput = { ...input, cursor: pageParam };
-                            return createTRPCClient(config?.config(event)).query(...getClientArgs([path, actualInput], opts));
+                            return client().query(...getClientArgs([path, actualInput], opts));
                         },
                     });
                 },
                 ensureQueryData: (pathAndInput, opts) => {
                     return queryClient.ensureQueryData({
                         queryKey: getArrayQueryKey(pathAndInput),
-                        queryFn: () => createTRPCClient(config?.config(event)).query(...getClientArgs(pathAndInput, opts)),
+                        queryFn: () => client().query(...getClientArgs(pathAndInput, opts)),
                     });
                 },
                 invalidateQueries: (...args) => {
@@ -124,27 +126,29 @@ export function createHooksInternal(config) {
         return __useContext(Context);
     }
     function useQuery(pathAndInput, opts) {
-        const event = isServer ? getRequestEvent() : undefined;
         const withCtxOpts = () => mergeProps(opts?.() ?? {}, {
             context: SolidQueryContext,
         });
+        const ctx = useContext();
         return __useQuery(() => ({
             queryKey: getArrayQueryKey(pathAndInput()),
             queryFn: wrapFn(() => {
-                return createTRPCClient(config?.config(event)).query(...getClientArgs(pathAndInput(), opts?.()));
+                return ctx.client().query(...getClientArgs(pathAndInput(), opts?.()));
             }),
             ...withCtxOpts(),
         }));
     }
     function useMutation(path, opts) {
-        const event = isServer ? getRequestEvent() : undefined;
         const withCtxOpts = () => mergeProps(opts?.(), {
             context: SolidQueryContext,
         });
+        const ctx = useContext();
         return __useMutation(() => ({
             mutationFn: (input) => {
                 const actualPath = Array.isArray(path) ? path[0] : path;
-                return createTRPCClient(config?.config(event)).mutation(...getClientArgs([actualPath, input], opts));
+                return ctx
+                    .client()
+                    .mutation(...getClientArgs([actualPath, input], opts));
             },
             ...withCtxOpts(),
         }));
@@ -156,13 +160,13 @@ export function createHooksInternal(config) {
      * ⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠
      */
     function useSubscription(pathAndInput, opts) {
+        const ctx = useContext();
         return createEffect(on(() => [pathAndInput(), opts?.()], () => {
             if (!(opts().enabled ?? true)) {
                 return;
             }
             let isStopped = false;
-            const event = isServer ? getRequestEvent() : undefined;
-            const subscription = createTRPCClient(config?.config(event)).subscription(pathAndInput()[0], (pathAndInput()[1] ?? undefined), {
+            const subscription = ctx.client().subscription(pathAndInput()[0], (pathAndInput()[1] ?? undefined), {
                 onStarted: () => {
                     if (!isStopped) {
                         opts?.()?.onStarted?.();
@@ -186,10 +190,10 @@ export function createHooksInternal(config) {
         }));
     }
     function useInfiniteQuery(pathAndInput, opts) {
-        const event = isServer ? getRequestEvent() : undefined;
         const withCtxOpts = () => mergeProps(opts?.(), {
             context: SolidQueryContext,
         });
+        const ctx = useContext();
         return __useInfiniteQuery(() => ({
             queryKey: getArrayQueryKey(pathAndInput()),
             queryFn: (queryFunctionContext) => {
@@ -197,7 +201,9 @@ export function createHooksInternal(config) {
                     ...(pathAndInput()[1] ?? {}),
                     cursor: queryFunctionContext.pageParam,
                 };
-                return createTRPCClient(config?.config(event)).query(...getClientArgs([pathAndInput()[0], actualInput], opts?.()));
+                return ctx
+                    .client()
+                    .query(...getClientArgs([pathAndInput()[0], actualInput], opts?.()));
             },
             ...withCtxOpts(),
         }));
diff --git a/dist/index/shared/hooks/types.d.ts b/dist/index/shared/hooks/types.d.ts
old mode 100644
new mode 100755
diff --git a/dist/index/shared/hooks/types.js b/dist/index/shared/hooks/types.js
old mode 100644
new mode 100755
diff --git a/dist/index/shared/index.d.ts b/dist/index/shared/index.d.ts
old mode 100644
new mode 100755
diff --git a/dist/index/shared/index.js b/dist/index/shared/index.js
old mode 100644
new mode 100755
diff --git a/dist/index/shared/proxy/decorationProxy.d.ts b/dist/index/shared/proxy/decorationProxy.d.ts
old mode 100644
new mode 100755
diff --git a/dist/index/shared/proxy/decorationProxy.js b/dist/index/shared/proxy/decorationProxy.js
old mode 100644
new mode 100755
diff --git a/dist/index/shared/proxy/utilsProxy.d.ts b/dist/index/shared/proxy/utilsProxy.d.ts
old mode 100644
new mode 100755
diff --git a/dist/index/shared/proxy/utilsProxy.js b/dist/index/shared/proxy/utilsProxy.js
old mode 100644
new mode 100755
diff --git a/dist/index/shared/queryClient.d.ts b/dist/index/shared/queryClient.d.ts
old mode 100644
new mode 100755
diff --git a/dist/index/shared/queryClient.js b/dist/index/shared/queryClient.js
old mode 100644
new mode 100755
diff --git a/dist/index/shared/types.d.ts b/dist/index/shared/types.d.ts
old mode 100644
new mode 100755
diff --git a/dist/index/shared/types.js b/dist/index/shared/types.js
old mode 100644
new mode 100755
diff --git a/handler.d.ts b/handler.d.ts
old mode 100644
new mode 100755
diff --git a/handler.js b/handler.js
old mode 100644
new mode 100755
